// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/CTP.proto

package com.xceder.CTP.messages;

public final class CTP {
  private CTP() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   *消息响应
   * </pre>
   *
   * Protobuf enum {@code com.xceder.CTP.messages.CTPRespCode}
   */
  public enum CTPRespCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     *CTP:正确
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <pre>
     *CTP:不在已同步状态
     * </pre>
     *
     * <code>INVALID_DATA_SYNC_STATUS = 1;</code>
     */
    INVALID_DATA_SYNC_STATUS(1),
    /**
     * <pre>
     *CTP:会话信息不一致
     * </pre>
     *
     * <code>INCONSISTENT_INFORMATION = 2;</code>
     */
    INCONSISTENT_INFORMATION(2),
    /**
     * <pre>
     *CTP:不合法的登录
     * </pre>
     *
     * <code>INVALID_LOGIN = 3;</code>
     */
    INVALID_LOGIN(3),
    /**
     * <pre>
     *CTP:用户不活跃
     * </pre>
     *
     * <code>USER_NOT_ACTIVE = 4;</code>
     */
    USER_NOT_ACTIVE(4),
    /**
     * <pre>
     *CTP:重复的登录
     * </pre>
     *
     * <code>DUPLICATE_LOGIN = 5;</code>
     */
    DUPLICATE_LOGIN(5),
    /**
     * <pre>
     *CTP:还没有登录
     * </pre>
     *
     * <code>NOT_LOGIN_YET = 6;</code>
     */
    NOT_LOGIN_YET(6),
    /**
     * <pre>
     *CTP:还没有初始化
     * </pre>
     *
     * <code>NOT_INITED = 7;</code>
     */
    NOT_INITED(7),
    /**
     * <pre>
     *CTP:前置不活跃
     * </pre>
     *
     * <code>FRONT_NOT_ACTIVE = 8;</code>
     */
    FRONT_NOT_ACTIVE(8),
    /**
     * <pre>
     *CTP:无此权限
     * </pre>
     *
     * <code>NO_PRIVILEGE = 9;</code>
     */
    NO_PRIVILEGE(9),
    /**
     * <pre>
     *CTP:修改别人的口令
     * </pre>
     *
     * <code>CHANGE_OTHER_PASSWORD = 10;</code>
     */
    CHANGE_OTHER_PASSWORD(10),
    /**
     * <pre>
     *CTP:找不到该用户
     * </pre>
     *
     * <code>USER_NOT_FOUND = 11;</code>
     */
    USER_NOT_FOUND(11),
    /**
     * <pre>
     *CTP:找不到该经纪公司
     * </pre>
     *
     * <code>BROKER_NOT_FOUND = 12;</code>
     */
    BROKER_NOT_FOUND(12),
    /**
     * <pre>
     *CTP:找不到投资者
     * </pre>
     *
     * <code>INVESTOR_NOT_FOUND = 13;</code>
     */
    INVESTOR_NOT_FOUND(13),
    /**
     * <pre>
     *CTP:原口令不匹配
     * </pre>
     *
     * <code>OLD_PASSWORD_MISMATCH = 14;</code>
     */
    OLD_PASSWORD_MISMATCH(14),
    /**
     * <pre>
     *CTP:报单字段有误
     * </pre>
     *
     * <code>BAD_FIELD = 15;</code>
     */
    BAD_FIELD(15),
    /**
     * <pre>
     *CTP:找不到合约
     * </pre>
     *
     * <code>INSTRUMENT_NOT_FOUND = 16;</code>
     */
    INSTRUMENT_NOT_FOUND(16),
    /**
     * <pre>
     *CTP:合约不能交易
     * </pre>
     *
     * <code>INSTRUMENT_NOT_TRADING = 17;</code>
     */
    INSTRUMENT_NOT_TRADING(17),
    /**
     * <pre>
     *CTP:经纪公司不是交易所的会员
     * </pre>
     *
     * <code>NOT_EXCHANGE_PARTICIPANT = 18;</code>
     */
    NOT_EXCHANGE_PARTICIPANT(18),
    /**
     * <pre>
     *CTP:投资者不活跃
     * </pre>
     *
     * <code>INVESTOR_NOT_ACTIVE = 19;</code>
     */
    INVESTOR_NOT_ACTIVE(19),
    /**
     * <pre>
     *CTP:投资者未在交易所开户
     * </pre>
     *
     * <code>NOT_EXCHANGE_CLIENT = 20;</code>
     */
    NOT_EXCHANGE_CLIENT(20),
    /**
     * <pre>
     *CTP:该交易席位未连接到交易所
     * </pre>
     *
     * <code>NO_VALID_TRADER_AVAILABLE = 21;</code>
     */
    NO_VALID_TRADER_AVAILABLE(21),
    /**
     * <pre>
     *CTP:报单错误：不允许重复报单
     * </pre>
     *
     * <code>DUPLICATE_ORDER_REF = 22;</code>
     */
    DUPLICATE_ORDER_REF(22),
    /**
     * <pre>
     *CTP:错误的报单操作字段
     * </pre>
     *
     * <code>BAD_ORDER_ACTION_FIELD = 23;</code>
     */
    BAD_ORDER_ACTION_FIELD(23),
    /**
     * <pre>
     *CTP:撤单已报送，不允许重复撤单
     * </pre>
     *
     * <code>DUPLICATE_ORDER_ACTION_REF = 24;</code>
     */
    DUPLICATE_ORDER_ACTION_REF(24),
    /**
     * <pre>
     *CTP:撤单找不到相应报单
     * </pre>
     *
     * <code>ORDER_NOT_FOUND = 25;</code>
     */
    ORDER_NOT_FOUND(25),
    /**
     * <pre>
     *CTP:报单已全成交或已撤销，不能再撤
     * </pre>
     *
     * <code>INSUITABLE_ORDER_STATUS = 26;</code>
     */
    INSUITABLE_ORDER_STATUS(26),
    /**
     * <pre>
     *CTP:不支持的功能
     * </pre>
     *
     * <code>UNSUPPORTED_FUNCTION = 27;</code>
     */
    UNSUPPORTED_FUNCTION(27),
    /**
     * <pre>
     *CTP:没有报单交易权限
     * </pre>
     *
     * <code>NO_TRADING_RIGHT = 28;</code>
     */
    NO_TRADING_RIGHT(28),
    /**
     * <pre>
     *CTP:只能平仓
     * </pre>
     *
     * <code>CLOSE_ONLY = 29;</code>
     */
    CLOSE_ONLY(29),
    /**
     * <pre>
     *CTP:平仓量超过持仓量
     * </pre>
     *
     * <code>OVER_CLOSE_POSITION = 30;</code>
     */
    OVER_CLOSE_POSITION(30),
    /**
     * <pre>
     *CTP:资金不足
     * </pre>
     *
     * <code>INSUFFICIENT_MONEY = 31;</code>
     */
    INSUFFICIENT_MONEY(31),
    /**
     * <pre>
     *CTP:主键重复
     * </pre>
     *
     * <code>DUPLICATE_PK = 32;</code>
     */
    DUPLICATE_PK(32),
    /**
     * <pre>
     *CTP:找不到主键
     * </pre>
     *
     * <code>CANNOT_FIND_PK = 33;</code>
     */
    CANNOT_FIND_PK(33),
    /**
     * <pre>
     *CTP:设置经纪公司不活跃状态失败
     * </pre>
     *
     * <code>CAN_NOT_INACTIVE_BROKER = 34;</code>
     */
    CAN_NOT_INACTIVE_BROKER(34),
    /**
     * <pre>
     *CTP:经纪公司正在同步
     * </pre>
     *
     * <code>BROKER_SYNCHRONIZING = 35;</code>
     */
    BROKER_SYNCHRONIZING(35),
    /**
     * <pre>
     *CTP:经纪公司已同步
     * </pre>
     *
     * <code>BROKER_SYNCHRONIZED = 36;</code>
     */
    BROKER_SYNCHRONIZED(36),
    /**
     * <pre>
     *CTP:现货交易不能卖空
     * </pre>
     *
     * <code>SHORT_SELL = 37;</code>
     */
    SHORT_SELL(37),
    /**
     * <pre>
     *CTP:不合法的结算引用
     * </pre>
     *
     * <code>INVALID_SETTLEMENT_REF = 38;</code>
     */
    INVALID_SETTLEMENT_REF(38),
    /**
     * <pre>
     *CTP:交易所网络连接失败
     * </pre>
     *
     * <code>CFFEX_NETWORK_ERROR = 39;</code>
     */
    CFFEX_NETWORK_ERROR(39),
    /**
     * <pre>
     *CTP:交易所未处理请求超过许可数
     * </pre>
     *
     * <code>CFFEX_OVER_REQUEST = 40;</code>
     */
    CFFEX_OVER_REQUEST(40),
    /**
     * <pre>
     *CTP:交易所每秒发送请求数超过许可数
     * </pre>
     *
     * <code>CFFEX_OVER_REQUEST_PER_SECOND = 41;</code>
     */
    CFFEX_OVER_REQUEST_PER_SECOND(41),
    /**
     * <pre>
     *CTP:结算结果未确认
     * </pre>
     *
     * <code>SETTLEMENT_INFO_NOT_CONFIRMED = 42;</code>
     */
    SETTLEMENT_INFO_NOT_CONFIRMED(42),
    /**
     * <pre>
     *CTP:没有对应的入金记录
     * </pre>
     *
     * <code>DEPOSIT_NOT_FOUND = 43;</code>
     */
    DEPOSIT_NOT_FOUND(43),
    /**
     * <pre>
     *CTP:交易所已经进入连续交易状态
     * </pre>
     *
     * <code>EXCHANG_TRADING = 44;</code>
     */
    EXCHANG_TRADING(44),
    /**
     * <pre>
     *CTP:找不到预埋（撤单）单
     * </pre>
     *
     * <code>PARKEDORDER_NOT_FOUND = 45;</code>
     */
    PARKEDORDER_NOT_FOUND(45),
    /**
     * <pre>
     *CTP:预埋（撤单）单已经发送
     * </pre>
     *
     * <code>PARKEDORDER_HASSENDED = 46;</code>
     */
    PARKEDORDER_HASSENDED(46),
    /**
     * <pre>
     *CTP:预埋（撤单）单已经删除
     * </pre>
     *
     * <code>PARKEDORDER_HASDELETE = 47;</code>
     */
    PARKEDORDER_HASDELETE(47),
    /**
     * <pre>
     *CTP:无效的投资者或者密码
     * </pre>
     *
     * <code>INVALID_INVESTORIDORPASSWORD = 48;</code>
     */
    INVALID_INVESTORIDORPASSWORD(48),
    /**
     * <pre>
     *CTP:不合法的登录IP地址
     * </pre>
     *
     * <code>INVALID_LOGIN_IPADDRESS = 49;</code>
     */
    INVALID_LOGIN_IPADDRESS(49),
    /**
     * <pre>
     *CTP:平今仓位不足
     * </pre>
     *
     * <code>OVER_CLOSETODAY_POSITION = 50;</code>
     */
    OVER_CLOSETODAY_POSITION(50),
    /**
     * <pre>
     *CTP:平昨仓位不足
     * </pre>
     *
     * <code>OVER_CLOSEYESTERDAY_POSITION = 51;</code>
     */
    OVER_CLOSEYESTERDAY_POSITION(51),
    /**
     * <pre>
     *CTP:经纪公司没有足够可用的条件单数量
     * </pre>
     *
     * <code>BROKER_NOT_ENOUGH_CONDORDER = 52;</code>
     */
    BROKER_NOT_ENOUGH_CONDORDER(52),
    /**
     * <pre>
     *CTP:投资者没有足够可用的条件单数量
     * </pre>
     *
     * <code>INVESTOR_NOT_ENOUGH_CONDORDER = 53;</code>
     */
    INVESTOR_NOT_ENOUGH_CONDORDER(53),
    /**
     * <pre>
     *CTP:经纪公司不支持条件单
     * </pre>
     *
     * <code>BROKER_NOT_SUPPORT_CONDORDER = 54;</code>
     */
    BROKER_NOT_SUPPORT_CONDORDER(54),
    /**
     * <pre>
     *CTP:重发未知单经济公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_ORDER_BROKERINVESTOR_NOTMATCH = 55;</code>
     */
    RESEND_ORDER_BROKERINVESTOR_NOTMATCH(55),
    /**
     * <pre>
     *CTP:同步动态令牌失败
     * </pre>
     *
     * <code>SYC_OTP_FAILED = 56;</code>
     */
    SYC_OTP_FAILED(56),
    /**
     * <pre>
     *CTP:动态令牌校验错误
     * </pre>
     *
     * <code>OTP_MISMATCH = 57;</code>
     */
    OTP_MISMATCH(57),
    /**
     * <pre>
     *CTP:找不到动态令牌配置信息
     * </pre>
     *
     * <code>OTPPARAM_NOT_FOUND = 58;</code>
     */
    OTPPARAM_NOT_FOUND(58),
    /**
     * <pre>
     *CTP:不支持的动态令牌类型
     * </pre>
     *
     * <code>UNSUPPORTED_OTPTYPE = 59;</code>
     */
    UNSUPPORTED_OTPTYPE(59),
    /**
     * <pre>
     *CTP:用户在线会话超出上限
     * </pre>
     *
     * <code>SINGLEUSERSESSION_EXCEED_LIMIT = 60;</code>
     */
    SINGLEUSERSESSION_EXCEED_LIMIT(60),
    /**
     * <pre>
     *CTP:该交易所不支持套利类型报单
     * </pre>
     *
     * <code>EXCHANGE_UNSUPPORTED_ARBITRAGE = 61;</code>
     */
    EXCHANGE_UNSUPPORTED_ARBITRAGE(61),
    /**
     * <pre>
     *CTP:没有条件单交易权限
     * </pre>
     *
     * <code>NO_CONDITIONAL_ORDER_RIGHT = 62;</code>
     */
    NO_CONDITIONAL_ORDER_RIGHT(62),
    /**
     * <pre>
     *CTP:客户端认证失败
     * </pre>
     *
     * <code>AUTH_FAILED = 63;</code>
     */
    AUTH_FAILED(63),
    /**
     * <pre>
     *CTP:客户端未认证
     * </pre>
     *
     * <code>NOT_AUTHENT = 64;</code>
     */
    NOT_AUTHENT(64),
    /**
     * <pre>
     *CTP:该合约不支持互换类型报单
     * </pre>
     *
     * <code>SWAPORDER_UNSUPPORTED = 65;</code>
     */
    SWAPORDER_UNSUPPORTED(65),
    /**
     * <pre>
     *CTP:该期权合约只支持投机类型报单
     * </pre>
     *
     * <code>OPTIONS_ONLY_SUPPORT_SPEC = 66;</code>
     */
    OPTIONS_ONLY_SUPPORT_SPEC(66),
    /**
     * <pre>
     *CTP:执行宣告错误，不允许重复执行
     * </pre>
     *
     * <code>DUPLICATE_EXECORDER_REF = 67;</code>
     */
    DUPLICATE_EXECORDER_REF(67),
    /**
     * <pre>
     *CTP:重发未知执行宣告经纪公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH = 68;</code>
     */
    RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH(68),
    /**
     * <pre>
     *CTP:只有期权合约可执行
     * </pre>
     *
     * <code>EXECORDER_NOTOPTIONS = 69;</code>
     */
    EXECORDER_NOTOPTIONS(69),
    /**
     * <pre>
     *CTP:该期权合约不支持执行
     * </pre>
     *
     * <code>OPTIONS_NOT_SUPPORT_EXEC = 70;</code>
     */
    OPTIONS_NOT_SUPPORT_EXEC(70),
    /**
     * <pre>
     *CTP:执行宣告字段有误
     * </pre>
     *
     * <code>BAD_EXECORDER_ACTION_FIELD = 71;</code>
     */
    BAD_EXECORDER_ACTION_FIELD(71),
    /**
     * <pre>
     *CTP:执行宣告撤单已报送，不允许重复撤单
     * </pre>
     *
     * <code>DUPLICATE_EXECORDER_ACTION_REF = 72;</code>
     */
    DUPLICATE_EXECORDER_ACTION_REF(72),
    /**
     * <pre>
     *CTP:执行宣告撤单找不到相应执行宣告
     * </pre>
     *
     * <code>EXECORDER_NOT_FOUND = 73;</code>
     */
    EXECORDER_NOT_FOUND(73),
    /**
     * <pre>
     *CTP:执行仓位不足
     * </pre>
     *
     * <code>OVER_EXECUTE_POSITION = 74;</code>
     */
    OVER_EXECUTE_POSITION(74),
    /**
     * <pre>
     *CTP:连续登录失败次数超限，登录被禁止
     * </pre>
     *
     * <code>LOGIN_FORBIDDEN = 75;</code>
     */
    LOGIN_FORBIDDEN(75),
    /**
     * <pre>
     *CTP:非法银期代理关系
     * </pre>
     *
     * <code>INVALID_TRANSFER_AGENT = 76;</code>
     */
    INVALID_TRANSFER_AGENT(76),
    /**
     * <pre>
     *CTP:无此功能
     * </pre>
     *
     * <code>NO_FOUND_FUNCTION = 77;</code>
     */
    NO_FOUND_FUNCTION(77),
    /**
     * <pre>
     *CTP:发送报单失败
     * </pre>
     *
     * <code>SEND_EXCHANGEORDER_FAILED = 78;</code>
     */
    SEND_EXCHANGEORDER_FAILED(78),
    /**
     * <pre>
     *CTP:发送报单操作失败
     * </pre>
     *
     * <code>SEND_EXCHANGEORDERACTION_FAILED = 79;</code>
     */
    SEND_EXCHANGEORDERACTION_FAILED(79),
    /**
     * <pre>
     *CTP:交易所不支持的价格类型
     * </pre>
     *
     * <code>PRICETYPE_NOTSUPPORT_BYEXCHANGE = 80;</code>
     */
    PRICETYPE_NOTSUPPORT_BYEXCHANGE(80),
    /**
     * <pre>
     *CTP:错误的执行类型
     * </pre>
     *
     * <code>BAD_EXECUTE_TYPE = 81;</code>
     */
    BAD_EXECUTE_TYPE(81),
    /**
     * <pre>
     *CTP:无效的组合合约
     * </pre>
     *
     * <code>BAD_OPTION_INSTR = 82;</code>
     */
    BAD_OPTION_INSTR(82),
    /**
     * <pre>
     *CTP:该合约不支持询价
     * </pre>
     *
     * <code>INSTR_NOTSUPPORT_FORQUOTE = 83;</code>
     */
    INSTR_NOTSUPPORT_FORQUOTE(83),
    /**
     * <pre>
     *CTP:重发未知报价经纪公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_QUOTE_BROKERINVESTOR_NOTMATCH = 84;</code>
     */
    RESEND_QUOTE_BROKERINVESTOR_NOTMATCH(84),
    /**
     * <pre>
     *CTP:该合约不支持报价
     * </pre>
     *
     * <code>INSTR_NOTSUPPORT_QUOTE = 85;</code>
     */
    INSTR_NOTSUPPORT_QUOTE(85),
    /**
     * <pre>
     *CTP:报价撤单找不到相应报价
     * </pre>
     *
     * <code>QUOTE_NOT_FOUND = 86;</code>
     */
    QUOTE_NOT_FOUND(86),
    /**
     * <pre>
     *CTP:该期权合约不支持放弃执行
     * </pre>
     *
     * <code>OPTIONS_NOT_SUPPORT_ABANDON = 87;</code>
     */
    OPTIONS_NOT_SUPPORT_ABANDON(87),
    /**
     * <pre>
     *CTP:该组合期权合约只支持IOC
     * </pre>
     *
     * <code>COMBOPTIONS_SUPPORT_IOC_ONLY = 88;</code>
     */
    COMBOPTIONS_SUPPORT_IOC_ONLY(88),
    /**
     * <pre>
     *CTP:打开文件失败
     * </pre>
     *
     * <code>OPEN_FILE_FAILED = 89;</code>
     */
    OPEN_FILE_FAILED(89),
    /**
     * <pre>
     *CTP：查询未就绪，请稍后重试
     * </pre>
     *
     * <code>NEED_RETRY = 90;</code>
     */
    NEED_RETRY(90),
    /**
     * <pre>
     *CTP：交易所返回的错误
     * </pre>
     *
     * <code>EXCHANGE_RTNERROR = 91;</code>
     */
    EXCHANGE_RTNERROR(91),
    /**
     * <pre>
     *CTP:报价衍生单要等待交易所返回才能撤单
     * </pre>
     *
     * <code>QUOTE_DERIVEDORDER_ACTIONERROR = 92;</code>
     */
    QUOTE_DERIVEDORDER_ACTIONERROR(92),
    /**
     * <pre>
     *CTP:找不到组合合约映射
     * </pre>
     *
     * <code>INSTRUMENTMAP_NOT_FOUND = 93;</code>
     */
    INSTRUMENTMAP_NOT_FOUND(93),
    /**
     * <pre>
     *灾备系统错误代码
     * </pre>
     *
     * <code>NO_TRADING_RIGHT_IN_SEPC_DR = 101;</code>
     */
    NO_TRADING_RIGHT_IN_SEPC_DR(101),
    /**
     * <pre>
     *CTP:系统缺少灾备标示号
     * </pre>
     *
     * <code>NO_DR_NO = 102;</code>
     */
    NO_DR_NO(102),
    /**
     * <pre>
     *转帐系统错误代码
     * </pre>
     *
     * <code>SEND_INSTITUTION_CODE_ERROR = 1000;</code>
     */
    SEND_INSTITUTION_CODE_ERROR(1000),
    /**
     * <pre>
     *CTP:银期转账：取平台流水号错误
     * </pre>
     *
     * <code>NO_GET_PLATFORM_SN = 1001;</code>
     */
    NO_GET_PLATFORM_SN(1001),
    /**
     * <pre>
     *CTP:银期转账：不合法的转账银行
     * </pre>
     *
     * <code>ILLEGAL_TRANSFER_BANK = 1002;</code>
     */
    ILLEGAL_TRANSFER_BANK(1002),
    /**
     * <pre>
     *CTP:银期转账：已经开户
     * </pre>
     *
     * <code>ALREADY_OPEN_ACCOUNT = 1003;</code>
     */
    ALREADY_OPEN_ACCOUNT(1003),
    /**
     * <pre>
     *CTP:银期转账：未开户
     * </pre>
     *
     * <code>NOT_OPEN_ACCOUNT = 1004;</code>
     */
    NOT_OPEN_ACCOUNT(1004),
    /**
     * <pre>
     *CTP:银期转账：处理中
     * </pre>
     *
     * <code>PROCESSING = 1005;</code>
     */
    PROCESSING(1005),
    /**
     * <pre>
     *CTP:银期转账：交易超时
     * </pre>
     *
     * <code>OVERTIME = 1006;</code>
     */
    OVERTIME(1006),
    /**
     * <pre>
     *CTP:银期转账：找不到记录
     * </pre>
     *
     * <code>RECORD_NOT_FOUND = 1007;</code>
     */
    RECORD_NOT_FOUND(1007),
    /**
     * <pre>
     *CTP:银期转账：找不到被冲正的原始交易
     * </pre>
     *
     * <code>NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION = 1008;</code>
     */
    NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION(1008),
    /**
     * <pre>
     *CTP:银期转账：连接主机失败
     * </pre>
     *
     * <code>CONNECT_HOST_FAILED = 1009;</code>
     */
    CONNECT_HOST_FAILED(1009),
    /**
     * <pre>
     *CTP:银期转账：发送失败
     * </pre>
     *
     * <code>SEND_FAILED = 1010;</code>
     */
    SEND_FAILED(1010),
    /**
     * <pre>
     *CTP:银期转账：迟到应答
     * </pre>
     *
     * <code>LATE_RESPONSE = 1011;</code>
     */
    LATE_RESPONSE(1011),
    /**
     * <pre>
     *CTP:银期转账：冲正交易银行代码错误
     * </pre>
     *
     * <code>REVERSAL_BANKID_NOT_MATCH = 1012;</code>
     */
    REVERSAL_BANKID_NOT_MATCH(1012),
    /**
     * <pre>
     *CTP:银期转账：冲正交易银行账户错误
     * </pre>
     *
     * <code>REVERSAL_BANKACCOUNT_NOT_MATCH = 1013;</code>
     */
    REVERSAL_BANKACCOUNT_NOT_MATCH(1013),
    /**
     * <pre>
     *CTP:银期转账：冲正交易经纪公司代码错误
     * </pre>
     *
     * <code>REVERSAL_BROKERID_NOT_MATCH = 1014;</code>
     */
    REVERSAL_BROKERID_NOT_MATCH(1014),
    /**
     * <pre>
     *CTP:银期转账：冲正交易资金账户错误
     * </pre>
     *
     * <code>REVERSAL_ACCOUNTID_NOT_MATCH = 1015;</code>
     */
    REVERSAL_ACCOUNTID_NOT_MATCH(1015),
    /**
     * <pre>
     *CTP:银期转账：冲正交易交易金额错误
     * </pre>
     *
     * <code>REVERSAL_AMOUNT_NOT_MATCH = 1016;</code>
     */
    REVERSAL_AMOUNT_NOT_MATCH(1016),
    /**
     * <pre>
     *CTP:银期转账：数据库操作错误
     * </pre>
     *
     * <code>DB_OPERATION_FAILED = 1017;</code>
     */
    DB_OPERATION_FAILED(1017),
    /**
     * <pre>
     *CTP:银期转账：发送到交易系统失败
     * </pre>
     *
     * <code>SEND_ASP_FAILURE = 1018;</code>
     */
    SEND_ASP_FAILURE(1018),
    /**
     * <pre>
     *CTP:银期转账：没有签到
     * </pre>
     *
     * <code>NOT_SIGNIN = 1019;</code>
     */
    NOT_SIGNIN(1019),
    /**
     * <pre>
     *CTP:银期转账：已经签到
     * </pre>
     *
     * <code>ALREADY_SIGNIN = 1020;</code>
     */
    ALREADY_SIGNIN(1020),
    /**
     * <pre>
     *CTP:银期转账：金额或次数超限
     * </pre>
     *
     * <code>AMOUNT_OR_TIMES_OVER = 1021;</code>
     */
    AMOUNT_OR_TIMES_OVER(1021),
    /**
     * <pre>
     *CTP:银期转账：这一时间段不能转账
     * </pre>
     *
     * <code>NOT_IN_TRANSFER_TIME = 1022;</code>
     */
    NOT_IN_TRANSFER_TIME(1022),
    /**
     * <pre>
     *银行主机错
     * </pre>
     *
     * <code>BANK_SERVER_ERROR = 1023;</code>
     */
    BANK_SERVER_ERROR(1023),
    /**
     * <pre>
     *CTP:银期转账：银行已经冲正
     * </pre>
     *
     * <code>BANK_SERIAL_IS_REPEALED = 1024;</code>
     */
    BANK_SERIAL_IS_REPEALED(1024),
    /**
     * <pre>
     *CTP:银期转账：银行流水不存在
     * </pre>
     *
     * <code>BANK_SERIAL_NOT_EXIST = 1025;</code>
     */
    BANK_SERIAL_NOT_EXIST(1025),
    /**
     * <pre>
     *CTP:银期转账：机构没有签约
     * </pre>
     *
     * <code>NOT_ORGAN_MAP = 1026;</code>
     */
    NOT_ORGAN_MAP(1026),
    /**
     * <pre>
     *CTP:银期转账：存在转账，不能销户
     * </pre>
     *
     * <code>EXIST_TRANSFER = 1027;</code>
     */
    EXIST_TRANSFER(1027),
    /**
     * <pre>
     *CTP:银期转账：银行不支持冲正
     * </pre>
     *
     * <code>BANK_FORBID_REVERSAL = 1028;</code>
     */
    BANK_FORBID_REVERSAL(1028),
    /**
     * <pre>
     *CTP:银期转账：重复的银行流水
     * </pre>
     *
     * <code>DUP_BANK_SERIAL = 1029;</code>
     */
    DUP_BANK_SERIAL(1029),
    /**
     * <pre>
     *CTP:银期转账：转账系统忙，稍后再试
     * </pre>
     *
     * <code>FBT_SYSTEM_BUSY = 1030;</code>
     */
    FBT_SYSTEM_BUSY(1030),
    /**
     * <pre>
     *CTP:银期转账：MAC密钥正在同步
     * </pre>
     *
     * <code>MACKEY_SYNCING = 1031;</code>
     */
    MACKEY_SYNCING(1031),
    /**
     * <pre>
     *CTP:银期转账：资金账户已经登记
     * </pre>
     *
     * <code>ACCOUNTID_ALREADY_REGISTER = 1032;</code>
     */
    ACCOUNTID_ALREADY_REGISTER(1032),
    /**
     * <pre>
     *CTP:银期转账：银行账户已经登记
     * </pre>
     *
     * <code>BANKACCOUNT_ALREADY_REGISTER = 1033;</code>
     */
    BANKACCOUNT_ALREADY_REGISTER(1033),
    /**
     * <pre>
     *CTP:银期转账：重复的银行流水,重发成功
     * </pre>
     *
     * <code>DUP_BANK_SERIAL_REDO_OK = 1034;</code>
     */
    DUP_BANK_SERIAL_REDO_OK(1034),
    /**
     * <pre>
     *CTP:银期转账：该币种代码不支持
     * </pre>
     *
     * <code>CURRENCYID_NOT_SUPPORTED = 1035;</code>
     */
    CURRENCYID_NOT_SUPPORTED(1035),
    /**
     * <pre>
     *CTP:银期转账：MAC值验证失败
     * </pre>
     *
     * <code>INVALID_MAC = 1036;</code>
     */
    INVALID_MAC(1036),
    /**
     * <pre>
     *CTP:银期转账：不支持银行端发起的二级代理商转账和查询
     * </pre>
     *
     * <code>NOT_SUPPORT_SECAGENT_BY_BANK = 1037;</code>
     */
    NOT_SUPPORT_SECAGENT_BY_BANK(1037),
    /**
     * <pre>
     *CTP:银期转账：PIN密钥正在同步
     * </pre>
     *
     * <code>PINKEY_SYNCING = 1038;</code>
     */
    PINKEY_SYNCING(1038),
    /**
     * <pre>
     *CTP:银期转账：建行发起的二级代理商查询
     * </pre>
     *
     * <code>SECAGENT_QUERY_BY_CCB = 1039;</code>
     */
    SECAGENT_QUERY_BY_CCB(1039),
    /**
     * <pre>
     *add for transfer begin --&gt;
     * </pre>
     *
     * <code>NO_VALID_BANKOFFER_AVAILABLE = 2000;</code>
     */
    NO_VALID_BANKOFFER_AVAILABLE(2000),
    /**
     * <pre>
     *CTP:资金密码错误
     * </pre>
     *
     * <code>PASSWORD_MISMATCH = 2001;</code>
     */
    PASSWORD_MISMATCH(2001),
    /**
     * <pre>
     *CTP:银行流水号重复
     * </pre>
     *
     * <code>DUPLATION_BANK_SERIAL = 2004;</code>
     */
    DUPLATION_BANK_SERIAL(2004),
    /**
     * <pre>
     *CTP:报盘流水号重复
     * </pre>
     *
     * <code>DUPLATION_OFFER_SERIAL = 2005;</code>
     */
    DUPLATION_OFFER_SERIAL(2005),
    /**
     * <pre>
     *CTP:被冲正流水不存在(冲正交易)
     * </pre>
     *
     * <code>SERIAL_NOT_EXSIT = 2006;</code>
     */
    SERIAL_NOT_EXSIT(2006),
    /**
     * <pre>
     *CTP:原流水已冲正(冲正交易)
     * </pre>
     *
     * <code>SERIAL_IS_REPEALED = 2007;</code>
     */
    SERIAL_IS_REPEALED(2007),
    /**
     * <pre>
     *CTP:与原流水信息不符(冲正交易)
     * </pre>
     *
     * <code>SERIAL_MISMATCH = 2008;</code>
     */
    SERIAL_MISMATCH(2008),
    /**
     * <pre>
     *CTP:证件号码或类型错误
     * </pre>
     *
     * <code>IdentifiedCardNo_MISMATCH = 2009;</code>
     */
    IdentifiedCardNo_MISMATCH(2009),
    /**
     * <pre>
     *CTP:资金账户不存在
     * </pre>
     *
     * <code>ACCOUNT_NOT_FUND = 2011;</code>
     */
    ACCOUNT_NOT_FUND(2011),
    /**
     * <pre>
     *CTP:资金账户已经销户
     * </pre>
     *
     * <code>ACCOUNT_NOT_ACTIVE = 2012;</code>
     */
    ACCOUNT_NOT_ACTIVE(2012),
    /**
     * <pre>
     *CTP:该交易不能执行手工冲正
     * </pre>
     *
     * <code>NOT_ALLOW_REPEAL_BYMANUAL = 2013;</code>
     */
    NOT_ALLOW_REPEAL_BYMANUAL(2013),
    /**
     * <pre>
     *CTP:转帐金额错误
     * </pre>
     *
     * <code>AMOUNT_OUTOFTHEWAY = 2014;</code>
     */
    AMOUNT_OUTOFTHEWAY(2014),
    /**
     * <pre>
     *CTP:找不到汇率
     * </pre>
     *
     * <code>EXCHANGERATE_NOT_FOUND = 2015;</code>
     */
    EXCHANGERATE_NOT_FOUND(2015),
    /**
     * <pre>
     *CTP:等待银期报盘处理结果
     * </pre>
     *
     * <code>WAITING_OFFER_RSP = 999999;</code>
     */
    WAITING_OFFER_RSP(999999),
    /**
     * <pre>
     *add for transfer end
     *换汇系统错误代码 bgn
     * </pre>
     *
     * <code>FBE_NO_GET_PLATFORM_SN = 3001;</code>
     */
    FBE_NO_GET_PLATFORM_SN(3001),
    /**
     * <pre>
     *CTP:银期换汇：不合法的转账银行
     * </pre>
     *
     * <code>FBE_ILLEGAL_TRANSFER_BANK = 3002;</code>
     */
    FBE_ILLEGAL_TRANSFER_BANK(3002),
    /**
     * <pre>
     *CTP:银期换汇：处理中
     * </pre>
     *
     * <code>FBE_PROCESSING = 3005;</code>
     */
    FBE_PROCESSING(3005),
    /**
     * <pre>
     *CTP:银期换汇：交易超时
     * </pre>
     *
     * <code>FBE_OVERTIME = 3006;</code>
     */
    FBE_OVERTIME(3006),
    /**
     * <pre>
     *CTP:银期换汇：找不到记录
     * </pre>
     *
     * <code>FBE_RECORD_NOT_FOUND = 3007;</code>
     */
    FBE_RECORD_NOT_FOUND(3007),
    /**
     * <pre>
     *CTP:银期换汇：连接主机失败
     * </pre>
     *
     * <code>FBE_CONNECT_HOST_FAILED = 3009;</code>
     */
    FBE_CONNECT_HOST_FAILED(3009),
    /**
     * <pre>
     *CTP:银期换汇：发送失败
     * </pre>
     *
     * <code>FBE_SEND_FAILED = 3010;</code>
     */
    FBE_SEND_FAILED(3010),
    /**
     * <pre>
     *CTP:银期换汇：迟到应答
     * </pre>
     *
     * <code>FBE_LATE_RESPONSE = 3011;</code>
     */
    FBE_LATE_RESPONSE(3011),
    /**
     * <pre>
     *CTP:银期换汇：数据库操作错误
     * </pre>
     *
     * <code>FBE_DB_OPERATION_FAILED = 3017;</code>
     */
    FBE_DB_OPERATION_FAILED(3017),
    /**
     * <pre>
     *CTP:银期换汇：没有签到
     * </pre>
     *
     * <code>FBE_NOT_SIGNIN = 3019;</code>
     */
    FBE_NOT_SIGNIN(3019),
    /**
     * <pre>
     *CTP:银期换汇：已经签到
     * </pre>
     *
     * <code>FBE_ALREADY_SIGNIN = 3020;</code>
     */
    FBE_ALREADY_SIGNIN(3020),
    /**
     * <pre>
     *CTP:银期换汇：金额或次数超限
     * </pre>
     *
     * <code>FBE_AMOUNT_OR_TIMES_OVER = 3021;</code>
     */
    FBE_AMOUNT_OR_TIMES_OVER(3021),
    /**
     * <pre>
     *CTP:银期换汇：这一时间段不能换汇
     * </pre>
     *
     * <code>FBE_NOT_IN_TRANSFER_TIME = 3022;</code>
     */
    FBE_NOT_IN_TRANSFER_TIME(3022),
    /**
     * <pre>
     *CTP:银期换汇：银行主机错
     * </pre>
     *
     * <code>FBE_BANK_SERVER_ERROR = 3023;</code>
     */
    FBE_BANK_SERVER_ERROR(3023),
    /**
     * <pre>
     *CTP:银期换汇：机构没有签约
     * </pre>
     *
     * <code>FBE_NOT_ORGAN_MAP = 3026;</code>
     */
    FBE_NOT_ORGAN_MAP(3026),
    /**
     * <pre>
     *CTP:银期换汇：换汇系统忙，稍后再试
     * </pre>
     *
     * <code>FBE_SYSTEM_BUSY = 3030;</code>
     */
    FBE_SYSTEM_BUSY(3030),
    /**
     * <pre>
     *CTP:银期换汇：该币种代码不支持
     * </pre>
     *
     * <code>FBE_CURRENCYID_NOT_SUPPORTED = 3035;</code>
     */
    FBE_CURRENCYID_NOT_SUPPORTED(3035),
    /**
     * <pre>
     *CTP:银期换汇：银行帐号不正确
     * </pre>
     *
     * <code>FBE_WRONG_BANK_ACCOUNT = 3036;</code>
     */
    FBE_WRONG_BANK_ACCOUNT(3036),
    /**
     * <pre>
     *CTP:银期换汇：银行帐户余额不足
     * </pre>
     *
     * <code>FBE_BANK_ACCOUNT_NO_FUNDS = 3037;</code>
     */
    FBE_BANK_ACCOUNT_NO_FUNDS(3037),
    /**
     * <pre>
     *CTP:银期换汇：凭证号重复
     * </pre>
     *
     * <code>FBE_DUP_CERT_NO = 3038;</code>
     */
    FBE_DUP_CERT_NO(3038),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     *CTP:正确
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <pre>
     *CTP:不在已同步状态
     * </pre>
     *
     * <code>INVALID_DATA_SYNC_STATUS = 1;</code>
     */
    public static final int INVALID_DATA_SYNC_STATUS_VALUE = 1;
    /**
     * <pre>
     *CTP:会话信息不一致
     * </pre>
     *
     * <code>INCONSISTENT_INFORMATION = 2;</code>
     */
    public static final int INCONSISTENT_INFORMATION_VALUE = 2;
    /**
     * <pre>
     *CTP:不合法的登录
     * </pre>
     *
     * <code>INVALID_LOGIN = 3;</code>
     */
    public static final int INVALID_LOGIN_VALUE = 3;
    /**
     * <pre>
     *CTP:用户不活跃
     * </pre>
     *
     * <code>USER_NOT_ACTIVE = 4;</code>
     */
    public static final int USER_NOT_ACTIVE_VALUE = 4;
    /**
     * <pre>
     *CTP:重复的登录
     * </pre>
     *
     * <code>DUPLICATE_LOGIN = 5;</code>
     */
    public static final int DUPLICATE_LOGIN_VALUE = 5;
    /**
     * <pre>
     *CTP:还没有登录
     * </pre>
     *
     * <code>NOT_LOGIN_YET = 6;</code>
     */
    public static final int NOT_LOGIN_YET_VALUE = 6;
    /**
     * <pre>
     *CTP:还没有初始化
     * </pre>
     *
     * <code>NOT_INITED = 7;</code>
     */
    public static final int NOT_INITED_VALUE = 7;
    /**
     * <pre>
     *CTP:前置不活跃
     * </pre>
     *
     * <code>FRONT_NOT_ACTIVE = 8;</code>
     */
    public static final int FRONT_NOT_ACTIVE_VALUE = 8;
    /**
     * <pre>
     *CTP:无此权限
     * </pre>
     *
     * <code>NO_PRIVILEGE = 9;</code>
     */
    public static final int NO_PRIVILEGE_VALUE = 9;
    /**
     * <pre>
     *CTP:修改别人的口令
     * </pre>
     *
     * <code>CHANGE_OTHER_PASSWORD = 10;</code>
     */
    public static final int CHANGE_OTHER_PASSWORD_VALUE = 10;
    /**
     * <pre>
     *CTP:找不到该用户
     * </pre>
     *
     * <code>USER_NOT_FOUND = 11;</code>
     */
    public static final int USER_NOT_FOUND_VALUE = 11;
    /**
     * <pre>
     *CTP:找不到该经纪公司
     * </pre>
     *
     * <code>BROKER_NOT_FOUND = 12;</code>
     */
    public static final int BROKER_NOT_FOUND_VALUE = 12;
    /**
     * <pre>
     *CTP:找不到投资者
     * </pre>
     *
     * <code>INVESTOR_NOT_FOUND = 13;</code>
     */
    public static final int INVESTOR_NOT_FOUND_VALUE = 13;
    /**
     * <pre>
     *CTP:原口令不匹配
     * </pre>
     *
     * <code>OLD_PASSWORD_MISMATCH = 14;</code>
     */
    public static final int OLD_PASSWORD_MISMATCH_VALUE = 14;
    /**
     * <pre>
     *CTP:报单字段有误
     * </pre>
     *
     * <code>BAD_FIELD = 15;</code>
     */
    public static final int BAD_FIELD_VALUE = 15;
    /**
     * <pre>
     *CTP:找不到合约
     * </pre>
     *
     * <code>INSTRUMENT_NOT_FOUND = 16;</code>
     */
    public static final int INSTRUMENT_NOT_FOUND_VALUE = 16;
    /**
     * <pre>
     *CTP:合约不能交易
     * </pre>
     *
     * <code>INSTRUMENT_NOT_TRADING = 17;</code>
     */
    public static final int INSTRUMENT_NOT_TRADING_VALUE = 17;
    /**
     * <pre>
     *CTP:经纪公司不是交易所的会员
     * </pre>
     *
     * <code>NOT_EXCHANGE_PARTICIPANT = 18;</code>
     */
    public static final int NOT_EXCHANGE_PARTICIPANT_VALUE = 18;
    /**
     * <pre>
     *CTP:投资者不活跃
     * </pre>
     *
     * <code>INVESTOR_NOT_ACTIVE = 19;</code>
     */
    public static final int INVESTOR_NOT_ACTIVE_VALUE = 19;
    /**
     * <pre>
     *CTP:投资者未在交易所开户
     * </pre>
     *
     * <code>NOT_EXCHANGE_CLIENT = 20;</code>
     */
    public static final int NOT_EXCHANGE_CLIENT_VALUE = 20;
    /**
     * <pre>
     *CTP:该交易席位未连接到交易所
     * </pre>
     *
     * <code>NO_VALID_TRADER_AVAILABLE = 21;</code>
     */
    public static final int NO_VALID_TRADER_AVAILABLE_VALUE = 21;
    /**
     * <pre>
     *CTP:报单错误：不允许重复报单
     * </pre>
     *
     * <code>DUPLICATE_ORDER_REF = 22;</code>
     */
    public static final int DUPLICATE_ORDER_REF_VALUE = 22;
    /**
     * <pre>
     *CTP:错误的报单操作字段
     * </pre>
     *
     * <code>BAD_ORDER_ACTION_FIELD = 23;</code>
     */
    public static final int BAD_ORDER_ACTION_FIELD_VALUE = 23;
    /**
     * <pre>
     *CTP:撤单已报送，不允许重复撤单
     * </pre>
     *
     * <code>DUPLICATE_ORDER_ACTION_REF = 24;</code>
     */
    public static final int DUPLICATE_ORDER_ACTION_REF_VALUE = 24;
    /**
     * <pre>
     *CTP:撤单找不到相应报单
     * </pre>
     *
     * <code>ORDER_NOT_FOUND = 25;</code>
     */
    public static final int ORDER_NOT_FOUND_VALUE = 25;
    /**
     * <pre>
     *CTP:报单已全成交或已撤销，不能再撤
     * </pre>
     *
     * <code>INSUITABLE_ORDER_STATUS = 26;</code>
     */
    public static final int INSUITABLE_ORDER_STATUS_VALUE = 26;
    /**
     * <pre>
     *CTP:不支持的功能
     * </pre>
     *
     * <code>UNSUPPORTED_FUNCTION = 27;</code>
     */
    public static final int UNSUPPORTED_FUNCTION_VALUE = 27;
    /**
     * <pre>
     *CTP:没有报单交易权限
     * </pre>
     *
     * <code>NO_TRADING_RIGHT = 28;</code>
     */
    public static final int NO_TRADING_RIGHT_VALUE = 28;
    /**
     * <pre>
     *CTP:只能平仓
     * </pre>
     *
     * <code>CLOSE_ONLY = 29;</code>
     */
    public static final int CLOSE_ONLY_VALUE = 29;
    /**
     * <pre>
     *CTP:平仓量超过持仓量
     * </pre>
     *
     * <code>OVER_CLOSE_POSITION = 30;</code>
     */
    public static final int OVER_CLOSE_POSITION_VALUE = 30;
    /**
     * <pre>
     *CTP:资金不足
     * </pre>
     *
     * <code>INSUFFICIENT_MONEY = 31;</code>
     */
    public static final int INSUFFICIENT_MONEY_VALUE = 31;
    /**
     * <pre>
     *CTP:主键重复
     * </pre>
     *
     * <code>DUPLICATE_PK = 32;</code>
     */
    public static final int DUPLICATE_PK_VALUE = 32;
    /**
     * <pre>
     *CTP:找不到主键
     * </pre>
     *
     * <code>CANNOT_FIND_PK = 33;</code>
     */
    public static final int CANNOT_FIND_PK_VALUE = 33;
    /**
     * <pre>
     *CTP:设置经纪公司不活跃状态失败
     * </pre>
     *
     * <code>CAN_NOT_INACTIVE_BROKER = 34;</code>
     */
    public static final int CAN_NOT_INACTIVE_BROKER_VALUE = 34;
    /**
     * <pre>
     *CTP:经纪公司正在同步
     * </pre>
     *
     * <code>BROKER_SYNCHRONIZING = 35;</code>
     */
    public static final int BROKER_SYNCHRONIZING_VALUE = 35;
    /**
     * <pre>
     *CTP:经纪公司已同步
     * </pre>
     *
     * <code>BROKER_SYNCHRONIZED = 36;</code>
     */
    public static final int BROKER_SYNCHRONIZED_VALUE = 36;
    /**
     * <pre>
     *CTP:现货交易不能卖空
     * </pre>
     *
     * <code>SHORT_SELL = 37;</code>
     */
    public static final int SHORT_SELL_VALUE = 37;
    /**
     * <pre>
     *CTP:不合法的结算引用
     * </pre>
     *
     * <code>INVALID_SETTLEMENT_REF = 38;</code>
     */
    public static final int INVALID_SETTLEMENT_REF_VALUE = 38;
    /**
     * <pre>
     *CTP:交易所网络连接失败
     * </pre>
     *
     * <code>CFFEX_NETWORK_ERROR = 39;</code>
     */
    public static final int CFFEX_NETWORK_ERROR_VALUE = 39;
    /**
     * <pre>
     *CTP:交易所未处理请求超过许可数
     * </pre>
     *
     * <code>CFFEX_OVER_REQUEST = 40;</code>
     */
    public static final int CFFEX_OVER_REQUEST_VALUE = 40;
    /**
     * <pre>
     *CTP:交易所每秒发送请求数超过许可数
     * </pre>
     *
     * <code>CFFEX_OVER_REQUEST_PER_SECOND = 41;</code>
     */
    public static final int CFFEX_OVER_REQUEST_PER_SECOND_VALUE = 41;
    /**
     * <pre>
     *CTP:结算结果未确认
     * </pre>
     *
     * <code>SETTLEMENT_INFO_NOT_CONFIRMED = 42;</code>
     */
    public static final int SETTLEMENT_INFO_NOT_CONFIRMED_VALUE = 42;
    /**
     * <pre>
     *CTP:没有对应的入金记录
     * </pre>
     *
     * <code>DEPOSIT_NOT_FOUND = 43;</code>
     */
    public static final int DEPOSIT_NOT_FOUND_VALUE = 43;
    /**
     * <pre>
     *CTP:交易所已经进入连续交易状态
     * </pre>
     *
     * <code>EXCHANG_TRADING = 44;</code>
     */
    public static final int EXCHANG_TRADING_VALUE = 44;
    /**
     * <pre>
     *CTP:找不到预埋（撤单）单
     * </pre>
     *
     * <code>PARKEDORDER_NOT_FOUND = 45;</code>
     */
    public static final int PARKEDORDER_NOT_FOUND_VALUE = 45;
    /**
     * <pre>
     *CTP:预埋（撤单）单已经发送
     * </pre>
     *
     * <code>PARKEDORDER_HASSENDED = 46;</code>
     */
    public static final int PARKEDORDER_HASSENDED_VALUE = 46;
    /**
     * <pre>
     *CTP:预埋（撤单）单已经删除
     * </pre>
     *
     * <code>PARKEDORDER_HASDELETE = 47;</code>
     */
    public static final int PARKEDORDER_HASDELETE_VALUE = 47;
    /**
     * <pre>
     *CTP:无效的投资者或者密码
     * </pre>
     *
     * <code>INVALID_INVESTORIDORPASSWORD = 48;</code>
     */
    public static final int INVALID_INVESTORIDORPASSWORD_VALUE = 48;
    /**
     * <pre>
     *CTP:不合法的登录IP地址
     * </pre>
     *
     * <code>INVALID_LOGIN_IPADDRESS = 49;</code>
     */
    public static final int INVALID_LOGIN_IPADDRESS_VALUE = 49;
    /**
     * <pre>
     *CTP:平今仓位不足
     * </pre>
     *
     * <code>OVER_CLOSETODAY_POSITION = 50;</code>
     */
    public static final int OVER_CLOSETODAY_POSITION_VALUE = 50;
    /**
     * <pre>
     *CTP:平昨仓位不足
     * </pre>
     *
     * <code>OVER_CLOSEYESTERDAY_POSITION = 51;</code>
     */
    public static final int OVER_CLOSEYESTERDAY_POSITION_VALUE = 51;
    /**
     * <pre>
     *CTP:经纪公司没有足够可用的条件单数量
     * </pre>
     *
     * <code>BROKER_NOT_ENOUGH_CONDORDER = 52;</code>
     */
    public static final int BROKER_NOT_ENOUGH_CONDORDER_VALUE = 52;
    /**
     * <pre>
     *CTP:投资者没有足够可用的条件单数量
     * </pre>
     *
     * <code>INVESTOR_NOT_ENOUGH_CONDORDER = 53;</code>
     */
    public static final int INVESTOR_NOT_ENOUGH_CONDORDER_VALUE = 53;
    /**
     * <pre>
     *CTP:经纪公司不支持条件单
     * </pre>
     *
     * <code>BROKER_NOT_SUPPORT_CONDORDER = 54;</code>
     */
    public static final int BROKER_NOT_SUPPORT_CONDORDER_VALUE = 54;
    /**
     * <pre>
     *CTP:重发未知单经济公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_ORDER_BROKERINVESTOR_NOTMATCH = 55;</code>
     */
    public static final int RESEND_ORDER_BROKERINVESTOR_NOTMATCH_VALUE = 55;
    /**
     * <pre>
     *CTP:同步动态令牌失败
     * </pre>
     *
     * <code>SYC_OTP_FAILED = 56;</code>
     */
    public static final int SYC_OTP_FAILED_VALUE = 56;
    /**
     * <pre>
     *CTP:动态令牌校验错误
     * </pre>
     *
     * <code>OTP_MISMATCH = 57;</code>
     */
    public static final int OTP_MISMATCH_VALUE = 57;
    /**
     * <pre>
     *CTP:找不到动态令牌配置信息
     * </pre>
     *
     * <code>OTPPARAM_NOT_FOUND = 58;</code>
     */
    public static final int OTPPARAM_NOT_FOUND_VALUE = 58;
    /**
     * <pre>
     *CTP:不支持的动态令牌类型
     * </pre>
     *
     * <code>UNSUPPORTED_OTPTYPE = 59;</code>
     */
    public static final int UNSUPPORTED_OTPTYPE_VALUE = 59;
    /**
     * <pre>
     *CTP:用户在线会话超出上限
     * </pre>
     *
     * <code>SINGLEUSERSESSION_EXCEED_LIMIT = 60;</code>
     */
    public static final int SINGLEUSERSESSION_EXCEED_LIMIT_VALUE = 60;
    /**
     * <pre>
     *CTP:该交易所不支持套利类型报单
     * </pre>
     *
     * <code>EXCHANGE_UNSUPPORTED_ARBITRAGE = 61;</code>
     */
    public static final int EXCHANGE_UNSUPPORTED_ARBITRAGE_VALUE = 61;
    /**
     * <pre>
     *CTP:没有条件单交易权限
     * </pre>
     *
     * <code>NO_CONDITIONAL_ORDER_RIGHT = 62;</code>
     */
    public static final int NO_CONDITIONAL_ORDER_RIGHT_VALUE = 62;
    /**
     * <pre>
     *CTP:客户端认证失败
     * </pre>
     *
     * <code>AUTH_FAILED = 63;</code>
     */
    public static final int AUTH_FAILED_VALUE = 63;
    /**
     * <pre>
     *CTP:客户端未认证
     * </pre>
     *
     * <code>NOT_AUTHENT = 64;</code>
     */
    public static final int NOT_AUTHENT_VALUE = 64;
    /**
     * <pre>
     *CTP:该合约不支持互换类型报单
     * </pre>
     *
     * <code>SWAPORDER_UNSUPPORTED = 65;</code>
     */
    public static final int SWAPORDER_UNSUPPORTED_VALUE = 65;
    /**
     * <pre>
     *CTP:该期权合约只支持投机类型报单
     * </pre>
     *
     * <code>OPTIONS_ONLY_SUPPORT_SPEC = 66;</code>
     */
    public static final int OPTIONS_ONLY_SUPPORT_SPEC_VALUE = 66;
    /**
     * <pre>
     *CTP:执行宣告错误，不允许重复执行
     * </pre>
     *
     * <code>DUPLICATE_EXECORDER_REF = 67;</code>
     */
    public static final int DUPLICATE_EXECORDER_REF_VALUE = 67;
    /**
     * <pre>
     *CTP:重发未知执行宣告经纪公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH = 68;</code>
     */
    public static final int RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH_VALUE = 68;
    /**
     * <pre>
     *CTP:只有期权合约可执行
     * </pre>
     *
     * <code>EXECORDER_NOTOPTIONS = 69;</code>
     */
    public static final int EXECORDER_NOTOPTIONS_VALUE = 69;
    /**
     * <pre>
     *CTP:该期权合约不支持执行
     * </pre>
     *
     * <code>OPTIONS_NOT_SUPPORT_EXEC = 70;</code>
     */
    public static final int OPTIONS_NOT_SUPPORT_EXEC_VALUE = 70;
    /**
     * <pre>
     *CTP:执行宣告字段有误
     * </pre>
     *
     * <code>BAD_EXECORDER_ACTION_FIELD = 71;</code>
     */
    public static final int BAD_EXECORDER_ACTION_FIELD_VALUE = 71;
    /**
     * <pre>
     *CTP:执行宣告撤单已报送，不允许重复撤单
     * </pre>
     *
     * <code>DUPLICATE_EXECORDER_ACTION_REF = 72;</code>
     */
    public static final int DUPLICATE_EXECORDER_ACTION_REF_VALUE = 72;
    /**
     * <pre>
     *CTP:执行宣告撤单找不到相应执行宣告
     * </pre>
     *
     * <code>EXECORDER_NOT_FOUND = 73;</code>
     */
    public static final int EXECORDER_NOT_FOUND_VALUE = 73;
    /**
     * <pre>
     *CTP:执行仓位不足
     * </pre>
     *
     * <code>OVER_EXECUTE_POSITION = 74;</code>
     */
    public static final int OVER_EXECUTE_POSITION_VALUE = 74;
    /**
     * <pre>
     *CTP:连续登录失败次数超限，登录被禁止
     * </pre>
     *
     * <code>LOGIN_FORBIDDEN = 75;</code>
     */
    public static final int LOGIN_FORBIDDEN_VALUE = 75;
    /**
     * <pre>
     *CTP:非法银期代理关系
     * </pre>
     *
     * <code>INVALID_TRANSFER_AGENT = 76;</code>
     */
    public static final int INVALID_TRANSFER_AGENT_VALUE = 76;
    /**
     * <pre>
     *CTP:无此功能
     * </pre>
     *
     * <code>NO_FOUND_FUNCTION = 77;</code>
     */
    public static final int NO_FOUND_FUNCTION_VALUE = 77;
    /**
     * <pre>
     *CTP:发送报单失败
     * </pre>
     *
     * <code>SEND_EXCHANGEORDER_FAILED = 78;</code>
     */
    public static final int SEND_EXCHANGEORDER_FAILED_VALUE = 78;
    /**
     * <pre>
     *CTP:发送报单操作失败
     * </pre>
     *
     * <code>SEND_EXCHANGEORDERACTION_FAILED = 79;</code>
     */
    public static final int SEND_EXCHANGEORDERACTION_FAILED_VALUE = 79;
    /**
     * <pre>
     *CTP:交易所不支持的价格类型
     * </pre>
     *
     * <code>PRICETYPE_NOTSUPPORT_BYEXCHANGE = 80;</code>
     */
    public static final int PRICETYPE_NOTSUPPORT_BYEXCHANGE_VALUE = 80;
    /**
     * <pre>
     *CTP:错误的执行类型
     * </pre>
     *
     * <code>BAD_EXECUTE_TYPE = 81;</code>
     */
    public static final int BAD_EXECUTE_TYPE_VALUE = 81;
    /**
     * <pre>
     *CTP:无效的组合合约
     * </pre>
     *
     * <code>BAD_OPTION_INSTR = 82;</code>
     */
    public static final int BAD_OPTION_INSTR_VALUE = 82;
    /**
     * <pre>
     *CTP:该合约不支持询价
     * </pre>
     *
     * <code>INSTR_NOTSUPPORT_FORQUOTE = 83;</code>
     */
    public static final int INSTR_NOTSUPPORT_FORQUOTE_VALUE = 83;
    /**
     * <pre>
     *CTP:重发未知报价经纪公司/投资者不匹配
     * </pre>
     *
     * <code>RESEND_QUOTE_BROKERINVESTOR_NOTMATCH = 84;</code>
     */
    public static final int RESEND_QUOTE_BROKERINVESTOR_NOTMATCH_VALUE = 84;
    /**
     * <pre>
     *CTP:该合约不支持报价
     * </pre>
     *
     * <code>INSTR_NOTSUPPORT_QUOTE = 85;</code>
     */
    public static final int INSTR_NOTSUPPORT_QUOTE_VALUE = 85;
    /**
     * <pre>
     *CTP:报价撤单找不到相应报价
     * </pre>
     *
     * <code>QUOTE_NOT_FOUND = 86;</code>
     */
    public static final int QUOTE_NOT_FOUND_VALUE = 86;
    /**
     * <pre>
     *CTP:该期权合约不支持放弃执行
     * </pre>
     *
     * <code>OPTIONS_NOT_SUPPORT_ABANDON = 87;</code>
     */
    public static final int OPTIONS_NOT_SUPPORT_ABANDON_VALUE = 87;
    /**
     * <pre>
     *CTP:该组合期权合约只支持IOC
     * </pre>
     *
     * <code>COMBOPTIONS_SUPPORT_IOC_ONLY = 88;</code>
     */
    public static final int COMBOPTIONS_SUPPORT_IOC_ONLY_VALUE = 88;
    /**
     * <pre>
     *CTP:打开文件失败
     * </pre>
     *
     * <code>OPEN_FILE_FAILED = 89;</code>
     */
    public static final int OPEN_FILE_FAILED_VALUE = 89;
    /**
     * <pre>
     *CTP：查询未就绪，请稍后重试
     * </pre>
     *
     * <code>NEED_RETRY = 90;</code>
     */
    public static final int NEED_RETRY_VALUE = 90;
    /**
     * <pre>
     *CTP：交易所返回的错误
     * </pre>
     *
     * <code>EXCHANGE_RTNERROR = 91;</code>
     */
    public static final int EXCHANGE_RTNERROR_VALUE = 91;
    /**
     * <pre>
     *CTP:报价衍生单要等待交易所返回才能撤单
     * </pre>
     *
     * <code>QUOTE_DERIVEDORDER_ACTIONERROR = 92;</code>
     */
    public static final int QUOTE_DERIVEDORDER_ACTIONERROR_VALUE = 92;
    /**
     * <pre>
     *CTP:找不到组合合约映射
     * </pre>
     *
     * <code>INSTRUMENTMAP_NOT_FOUND = 93;</code>
     */
    public static final int INSTRUMENTMAP_NOT_FOUND_VALUE = 93;
    /**
     * <pre>
     *灾备系统错误代码
     * </pre>
     *
     * <code>NO_TRADING_RIGHT_IN_SEPC_DR = 101;</code>
     */
    public static final int NO_TRADING_RIGHT_IN_SEPC_DR_VALUE = 101;
    /**
     * <pre>
     *CTP:系统缺少灾备标示号
     * </pre>
     *
     * <code>NO_DR_NO = 102;</code>
     */
    public static final int NO_DR_NO_VALUE = 102;
    /**
     * <pre>
     *转帐系统错误代码
     * </pre>
     *
     * <code>SEND_INSTITUTION_CODE_ERROR = 1000;</code>
     */
    public static final int SEND_INSTITUTION_CODE_ERROR_VALUE = 1000;
    /**
     * <pre>
     *CTP:银期转账：取平台流水号错误
     * </pre>
     *
     * <code>NO_GET_PLATFORM_SN = 1001;</code>
     */
    public static final int NO_GET_PLATFORM_SN_VALUE = 1001;
    /**
     * <pre>
     *CTP:银期转账：不合法的转账银行
     * </pre>
     *
     * <code>ILLEGAL_TRANSFER_BANK = 1002;</code>
     */
    public static final int ILLEGAL_TRANSFER_BANK_VALUE = 1002;
    /**
     * <pre>
     *CTP:银期转账：已经开户
     * </pre>
     *
     * <code>ALREADY_OPEN_ACCOUNT = 1003;</code>
     */
    public static final int ALREADY_OPEN_ACCOUNT_VALUE = 1003;
    /**
     * <pre>
     *CTP:银期转账：未开户
     * </pre>
     *
     * <code>NOT_OPEN_ACCOUNT = 1004;</code>
     */
    public static final int NOT_OPEN_ACCOUNT_VALUE = 1004;
    /**
     * <pre>
     *CTP:银期转账：处理中
     * </pre>
     *
     * <code>PROCESSING = 1005;</code>
     */
    public static final int PROCESSING_VALUE = 1005;
    /**
     * <pre>
     *CTP:银期转账：交易超时
     * </pre>
     *
     * <code>OVERTIME = 1006;</code>
     */
    public static final int OVERTIME_VALUE = 1006;
    /**
     * <pre>
     *CTP:银期转账：找不到记录
     * </pre>
     *
     * <code>RECORD_NOT_FOUND = 1007;</code>
     */
    public static final int RECORD_NOT_FOUND_VALUE = 1007;
    /**
     * <pre>
     *CTP:银期转账：找不到被冲正的原始交易
     * </pre>
     *
     * <code>NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION = 1008;</code>
     */
    public static final int NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION_VALUE = 1008;
    /**
     * <pre>
     *CTP:银期转账：连接主机失败
     * </pre>
     *
     * <code>CONNECT_HOST_FAILED = 1009;</code>
     */
    public static final int CONNECT_HOST_FAILED_VALUE = 1009;
    /**
     * <pre>
     *CTP:银期转账：发送失败
     * </pre>
     *
     * <code>SEND_FAILED = 1010;</code>
     */
    public static final int SEND_FAILED_VALUE = 1010;
    /**
     * <pre>
     *CTP:银期转账：迟到应答
     * </pre>
     *
     * <code>LATE_RESPONSE = 1011;</code>
     */
    public static final int LATE_RESPONSE_VALUE = 1011;
    /**
     * <pre>
     *CTP:银期转账：冲正交易银行代码错误
     * </pre>
     *
     * <code>REVERSAL_BANKID_NOT_MATCH = 1012;</code>
     */
    public static final int REVERSAL_BANKID_NOT_MATCH_VALUE = 1012;
    /**
     * <pre>
     *CTP:银期转账：冲正交易银行账户错误
     * </pre>
     *
     * <code>REVERSAL_BANKACCOUNT_NOT_MATCH = 1013;</code>
     */
    public static final int REVERSAL_BANKACCOUNT_NOT_MATCH_VALUE = 1013;
    /**
     * <pre>
     *CTP:银期转账：冲正交易经纪公司代码错误
     * </pre>
     *
     * <code>REVERSAL_BROKERID_NOT_MATCH = 1014;</code>
     */
    public static final int REVERSAL_BROKERID_NOT_MATCH_VALUE = 1014;
    /**
     * <pre>
     *CTP:银期转账：冲正交易资金账户错误
     * </pre>
     *
     * <code>REVERSAL_ACCOUNTID_NOT_MATCH = 1015;</code>
     */
    public static final int REVERSAL_ACCOUNTID_NOT_MATCH_VALUE = 1015;
    /**
     * <pre>
     *CTP:银期转账：冲正交易交易金额错误
     * </pre>
     *
     * <code>REVERSAL_AMOUNT_NOT_MATCH = 1016;</code>
     */
    public static final int REVERSAL_AMOUNT_NOT_MATCH_VALUE = 1016;
    /**
     * <pre>
     *CTP:银期转账：数据库操作错误
     * </pre>
     *
     * <code>DB_OPERATION_FAILED = 1017;</code>
     */
    public static final int DB_OPERATION_FAILED_VALUE = 1017;
    /**
     * <pre>
     *CTP:银期转账：发送到交易系统失败
     * </pre>
     *
     * <code>SEND_ASP_FAILURE = 1018;</code>
     */
    public static final int SEND_ASP_FAILURE_VALUE = 1018;
    /**
     * <pre>
     *CTP:银期转账：没有签到
     * </pre>
     *
     * <code>NOT_SIGNIN = 1019;</code>
     */
    public static final int NOT_SIGNIN_VALUE = 1019;
    /**
     * <pre>
     *CTP:银期转账：已经签到
     * </pre>
     *
     * <code>ALREADY_SIGNIN = 1020;</code>
     */
    public static final int ALREADY_SIGNIN_VALUE = 1020;
    /**
     * <pre>
     *CTP:银期转账：金额或次数超限
     * </pre>
     *
     * <code>AMOUNT_OR_TIMES_OVER = 1021;</code>
     */
    public static final int AMOUNT_OR_TIMES_OVER_VALUE = 1021;
    /**
     * <pre>
     *CTP:银期转账：这一时间段不能转账
     * </pre>
     *
     * <code>NOT_IN_TRANSFER_TIME = 1022;</code>
     */
    public static final int NOT_IN_TRANSFER_TIME_VALUE = 1022;
    /**
     * <pre>
     *银行主机错
     * </pre>
     *
     * <code>BANK_SERVER_ERROR = 1023;</code>
     */
    public static final int BANK_SERVER_ERROR_VALUE = 1023;
    /**
     * <pre>
     *CTP:银期转账：银行已经冲正
     * </pre>
     *
     * <code>BANK_SERIAL_IS_REPEALED = 1024;</code>
     */
    public static final int BANK_SERIAL_IS_REPEALED_VALUE = 1024;
    /**
     * <pre>
     *CTP:银期转账：银行流水不存在
     * </pre>
     *
     * <code>BANK_SERIAL_NOT_EXIST = 1025;</code>
     */
    public static final int BANK_SERIAL_NOT_EXIST_VALUE = 1025;
    /**
     * <pre>
     *CTP:银期转账：机构没有签约
     * </pre>
     *
     * <code>NOT_ORGAN_MAP = 1026;</code>
     */
    public static final int NOT_ORGAN_MAP_VALUE = 1026;
    /**
     * <pre>
     *CTP:银期转账：存在转账，不能销户
     * </pre>
     *
     * <code>EXIST_TRANSFER = 1027;</code>
     */
    public static final int EXIST_TRANSFER_VALUE = 1027;
    /**
     * <pre>
     *CTP:银期转账：银行不支持冲正
     * </pre>
     *
     * <code>BANK_FORBID_REVERSAL = 1028;</code>
     */
    public static final int BANK_FORBID_REVERSAL_VALUE = 1028;
    /**
     * <pre>
     *CTP:银期转账：重复的银行流水
     * </pre>
     *
     * <code>DUP_BANK_SERIAL = 1029;</code>
     */
    public static final int DUP_BANK_SERIAL_VALUE = 1029;
    /**
     * <pre>
     *CTP:银期转账：转账系统忙，稍后再试
     * </pre>
     *
     * <code>FBT_SYSTEM_BUSY = 1030;</code>
     */
    public static final int FBT_SYSTEM_BUSY_VALUE = 1030;
    /**
     * <pre>
     *CTP:银期转账：MAC密钥正在同步
     * </pre>
     *
     * <code>MACKEY_SYNCING = 1031;</code>
     */
    public static final int MACKEY_SYNCING_VALUE = 1031;
    /**
     * <pre>
     *CTP:银期转账：资金账户已经登记
     * </pre>
     *
     * <code>ACCOUNTID_ALREADY_REGISTER = 1032;</code>
     */
    public static final int ACCOUNTID_ALREADY_REGISTER_VALUE = 1032;
    /**
     * <pre>
     *CTP:银期转账：银行账户已经登记
     * </pre>
     *
     * <code>BANKACCOUNT_ALREADY_REGISTER = 1033;</code>
     */
    public static final int BANKACCOUNT_ALREADY_REGISTER_VALUE = 1033;
    /**
     * <pre>
     *CTP:银期转账：重复的银行流水,重发成功
     * </pre>
     *
     * <code>DUP_BANK_SERIAL_REDO_OK = 1034;</code>
     */
    public static final int DUP_BANK_SERIAL_REDO_OK_VALUE = 1034;
    /**
     * <pre>
     *CTP:银期转账：该币种代码不支持
     * </pre>
     *
     * <code>CURRENCYID_NOT_SUPPORTED = 1035;</code>
     */
    public static final int CURRENCYID_NOT_SUPPORTED_VALUE = 1035;
    /**
     * <pre>
     *CTP:银期转账：MAC值验证失败
     * </pre>
     *
     * <code>INVALID_MAC = 1036;</code>
     */
    public static final int INVALID_MAC_VALUE = 1036;
    /**
     * <pre>
     *CTP:银期转账：不支持银行端发起的二级代理商转账和查询
     * </pre>
     *
     * <code>NOT_SUPPORT_SECAGENT_BY_BANK = 1037;</code>
     */
    public static final int NOT_SUPPORT_SECAGENT_BY_BANK_VALUE = 1037;
    /**
     * <pre>
     *CTP:银期转账：PIN密钥正在同步
     * </pre>
     *
     * <code>PINKEY_SYNCING = 1038;</code>
     */
    public static final int PINKEY_SYNCING_VALUE = 1038;
    /**
     * <pre>
     *CTP:银期转账：建行发起的二级代理商查询
     * </pre>
     *
     * <code>SECAGENT_QUERY_BY_CCB = 1039;</code>
     */
    public static final int SECAGENT_QUERY_BY_CCB_VALUE = 1039;
    /**
     * <pre>
     *add for transfer begin --&gt;
     * </pre>
     *
     * <code>NO_VALID_BANKOFFER_AVAILABLE = 2000;</code>
     */
    public static final int NO_VALID_BANKOFFER_AVAILABLE_VALUE = 2000;
    /**
     * <pre>
     *CTP:资金密码错误
     * </pre>
     *
     * <code>PASSWORD_MISMATCH = 2001;</code>
     */
    public static final int PASSWORD_MISMATCH_VALUE = 2001;
    /**
     * <pre>
     *CTP:银行流水号重复
     * </pre>
     *
     * <code>DUPLATION_BANK_SERIAL = 2004;</code>
     */
    public static final int DUPLATION_BANK_SERIAL_VALUE = 2004;
    /**
     * <pre>
     *CTP:报盘流水号重复
     * </pre>
     *
     * <code>DUPLATION_OFFER_SERIAL = 2005;</code>
     */
    public static final int DUPLATION_OFFER_SERIAL_VALUE = 2005;
    /**
     * <pre>
     *CTP:被冲正流水不存在(冲正交易)
     * </pre>
     *
     * <code>SERIAL_NOT_EXSIT = 2006;</code>
     */
    public static final int SERIAL_NOT_EXSIT_VALUE = 2006;
    /**
     * <pre>
     *CTP:原流水已冲正(冲正交易)
     * </pre>
     *
     * <code>SERIAL_IS_REPEALED = 2007;</code>
     */
    public static final int SERIAL_IS_REPEALED_VALUE = 2007;
    /**
     * <pre>
     *CTP:与原流水信息不符(冲正交易)
     * </pre>
     *
     * <code>SERIAL_MISMATCH = 2008;</code>
     */
    public static final int SERIAL_MISMATCH_VALUE = 2008;
    /**
     * <pre>
     *CTP:证件号码或类型错误
     * </pre>
     *
     * <code>IdentifiedCardNo_MISMATCH = 2009;</code>
     */
    public static final int IdentifiedCardNo_MISMATCH_VALUE = 2009;
    /**
     * <pre>
     *CTP:资金账户不存在
     * </pre>
     *
     * <code>ACCOUNT_NOT_FUND = 2011;</code>
     */
    public static final int ACCOUNT_NOT_FUND_VALUE = 2011;
    /**
     * <pre>
     *CTP:资金账户已经销户
     * </pre>
     *
     * <code>ACCOUNT_NOT_ACTIVE = 2012;</code>
     */
    public static final int ACCOUNT_NOT_ACTIVE_VALUE = 2012;
    /**
     * <pre>
     *CTP:该交易不能执行手工冲正
     * </pre>
     *
     * <code>NOT_ALLOW_REPEAL_BYMANUAL = 2013;</code>
     */
    public static final int NOT_ALLOW_REPEAL_BYMANUAL_VALUE = 2013;
    /**
     * <pre>
     *CTP:转帐金额错误
     * </pre>
     *
     * <code>AMOUNT_OUTOFTHEWAY = 2014;</code>
     */
    public static final int AMOUNT_OUTOFTHEWAY_VALUE = 2014;
    /**
     * <pre>
     *CTP:找不到汇率
     * </pre>
     *
     * <code>EXCHANGERATE_NOT_FOUND = 2015;</code>
     */
    public static final int EXCHANGERATE_NOT_FOUND_VALUE = 2015;
    /**
     * <pre>
     *CTP:等待银期报盘处理结果
     * </pre>
     *
     * <code>WAITING_OFFER_RSP = 999999;</code>
     */
    public static final int WAITING_OFFER_RSP_VALUE = 999999;
    /**
     * <pre>
     *add for transfer end
     *换汇系统错误代码 bgn
     * </pre>
     *
     * <code>FBE_NO_GET_PLATFORM_SN = 3001;</code>
     */
    public static final int FBE_NO_GET_PLATFORM_SN_VALUE = 3001;
    /**
     * <pre>
     *CTP:银期换汇：不合法的转账银行
     * </pre>
     *
     * <code>FBE_ILLEGAL_TRANSFER_BANK = 3002;</code>
     */
    public static final int FBE_ILLEGAL_TRANSFER_BANK_VALUE = 3002;
    /**
     * <pre>
     *CTP:银期换汇：处理中
     * </pre>
     *
     * <code>FBE_PROCESSING = 3005;</code>
     */
    public static final int FBE_PROCESSING_VALUE = 3005;
    /**
     * <pre>
     *CTP:银期换汇：交易超时
     * </pre>
     *
     * <code>FBE_OVERTIME = 3006;</code>
     */
    public static final int FBE_OVERTIME_VALUE = 3006;
    /**
     * <pre>
     *CTP:银期换汇：找不到记录
     * </pre>
     *
     * <code>FBE_RECORD_NOT_FOUND = 3007;</code>
     */
    public static final int FBE_RECORD_NOT_FOUND_VALUE = 3007;
    /**
     * <pre>
     *CTP:银期换汇：连接主机失败
     * </pre>
     *
     * <code>FBE_CONNECT_HOST_FAILED = 3009;</code>
     */
    public static final int FBE_CONNECT_HOST_FAILED_VALUE = 3009;
    /**
     * <pre>
     *CTP:银期换汇：发送失败
     * </pre>
     *
     * <code>FBE_SEND_FAILED = 3010;</code>
     */
    public static final int FBE_SEND_FAILED_VALUE = 3010;
    /**
     * <pre>
     *CTP:银期换汇：迟到应答
     * </pre>
     *
     * <code>FBE_LATE_RESPONSE = 3011;</code>
     */
    public static final int FBE_LATE_RESPONSE_VALUE = 3011;
    /**
     * <pre>
     *CTP:银期换汇：数据库操作错误
     * </pre>
     *
     * <code>FBE_DB_OPERATION_FAILED = 3017;</code>
     */
    public static final int FBE_DB_OPERATION_FAILED_VALUE = 3017;
    /**
     * <pre>
     *CTP:银期换汇：没有签到
     * </pre>
     *
     * <code>FBE_NOT_SIGNIN = 3019;</code>
     */
    public static final int FBE_NOT_SIGNIN_VALUE = 3019;
    /**
     * <pre>
     *CTP:银期换汇：已经签到
     * </pre>
     *
     * <code>FBE_ALREADY_SIGNIN = 3020;</code>
     */
    public static final int FBE_ALREADY_SIGNIN_VALUE = 3020;
    /**
     * <pre>
     *CTP:银期换汇：金额或次数超限
     * </pre>
     *
     * <code>FBE_AMOUNT_OR_TIMES_OVER = 3021;</code>
     */
    public static final int FBE_AMOUNT_OR_TIMES_OVER_VALUE = 3021;
    /**
     * <pre>
     *CTP:银期换汇：这一时间段不能换汇
     * </pre>
     *
     * <code>FBE_NOT_IN_TRANSFER_TIME = 3022;</code>
     */
    public static final int FBE_NOT_IN_TRANSFER_TIME_VALUE = 3022;
    /**
     * <pre>
     *CTP:银期换汇：银行主机错
     * </pre>
     *
     * <code>FBE_BANK_SERVER_ERROR = 3023;</code>
     */
    public static final int FBE_BANK_SERVER_ERROR_VALUE = 3023;
    /**
     * <pre>
     *CTP:银期换汇：机构没有签约
     * </pre>
     *
     * <code>FBE_NOT_ORGAN_MAP = 3026;</code>
     */
    public static final int FBE_NOT_ORGAN_MAP_VALUE = 3026;
    /**
     * <pre>
     *CTP:银期换汇：换汇系统忙，稍后再试
     * </pre>
     *
     * <code>FBE_SYSTEM_BUSY = 3030;</code>
     */
    public static final int FBE_SYSTEM_BUSY_VALUE = 3030;
    /**
     * <pre>
     *CTP:银期换汇：该币种代码不支持
     * </pre>
     *
     * <code>FBE_CURRENCYID_NOT_SUPPORTED = 3035;</code>
     */
    public static final int FBE_CURRENCYID_NOT_SUPPORTED_VALUE = 3035;
    /**
     * <pre>
     *CTP:银期换汇：银行帐号不正确
     * </pre>
     *
     * <code>FBE_WRONG_BANK_ACCOUNT = 3036;</code>
     */
    public static final int FBE_WRONG_BANK_ACCOUNT_VALUE = 3036;
    /**
     * <pre>
     *CTP:银期换汇：银行帐户余额不足
     * </pre>
     *
     * <code>FBE_BANK_ACCOUNT_NO_FUNDS = 3037;</code>
     */
    public static final int FBE_BANK_ACCOUNT_NO_FUNDS_VALUE = 3037;
    /**
     * <pre>
     *CTP:银期换汇：凭证号重复
     * </pre>
     *
     * <code>FBE_DUP_CERT_NO = 3038;</code>
     */
    public static final int FBE_DUP_CERT_NO_VALUE = 3038;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CTPRespCode valueOf(int value) {
      return forNumber(value);
    }

    public static CTPRespCode forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return INVALID_DATA_SYNC_STATUS;
        case 2: return INCONSISTENT_INFORMATION;
        case 3: return INVALID_LOGIN;
        case 4: return USER_NOT_ACTIVE;
        case 5: return DUPLICATE_LOGIN;
        case 6: return NOT_LOGIN_YET;
        case 7: return NOT_INITED;
        case 8: return FRONT_NOT_ACTIVE;
        case 9: return NO_PRIVILEGE;
        case 10: return CHANGE_OTHER_PASSWORD;
        case 11: return USER_NOT_FOUND;
        case 12: return BROKER_NOT_FOUND;
        case 13: return INVESTOR_NOT_FOUND;
        case 14: return OLD_PASSWORD_MISMATCH;
        case 15: return BAD_FIELD;
        case 16: return INSTRUMENT_NOT_FOUND;
        case 17: return INSTRUMENT_NOT_TRADING;
        case 18: return NOT_EXCHANGE_PARTICIPANT;
        case 19: return INVESTOR_NOT_ACTIVE;
        case 20: return NOT_EXCHANGE_CLIENT;
        case 21: return NO_VALID_TRADER_AVAILABLE;
        case 22: return DUPLICATE_ORDER_REF;
        case 23: return BAD_ORDER_ACTION_FIELD;
        case 24: return DUPLICATE_ORDER_ACTION_REF;
        case 25: return ORDER_NOT_FOUND;
        case 26: return INSUITABLE_ORDER_STATUS;
        case 27: return UNSUPPORTED_FUNCTION;
        case 28: return NO_TRADING_RIGHT;
        case 29: return CLOSE_ONLY;
        case 30: return OVER_CLOSE_POSITION;
        case 31: return INSUFFICIENT_MONEY;
        case 32: return DUPLICATE_PK;
        case 33: return CANNOT_FIND_PK;
        case 34: return CAN_NOT_INACTIVE_BROKER;
        case 35: return BROKER_SYNCHRONIZING;
        case 36: return BROKER_SYNCHRONIZED;
        case 37: return SHORT_SELL;
        case 38: return INVALID_SETTLEMENT_REF;
        case 39: return CFFEX_NETWORK_ERROR;
        case 40: return CFFEX_OVER_REQUEST;
        case 41: return CFFEX_OVER_REQUEST_PER_SECOND;
        case 42: return SETTLEMENT_INFO_NOT_CONFIRMED;
        case 43: return DEPOSIT_NOT_FOUND;
        case 44: return EXCHANG_TRADING;
        case 45: return PARKEDORDER_NOT_FOUND;
        case 46: return PARKEDORDER_HASSENDED;
        case 47: return PARKEDORDER_HASDELETE;
        case 48: return INVALID_INVESTORIDORPASSWORD;
        case 49: return INVALID_LOGIN_IPADDRESS;
        case 50: return OVER_CLOSETODAY_POSITION;
        case 51: return OVER_CLOSEYESTERDAY_POSITION;
        case 52: return BROKER_NOT_ENOUGH_CONDORDER;
        case 53: return INVESTOR_NOT_ENOUGH_CONDORDER;
        case 54: return BROKER_NOT_SUPPORT_CONDORDER;
        case 55: return RESEND_ORDER_BROKERINVESTOR_NOTMATCH;
        case 56: return SYC_OTP_FAILED;
        case 57: return OTP_MISMATCH;
        case 58: return OTPPARAM_NOT_FOUND;
        case 59: return UNSUPPORTED_OTPTYPE;
        case 60: return SINGLEUSERSESSION_EXCEED_LIMIT;
        case 61: return EXCHANGE_UNSUPPORTED_ARBITRAGE;
        case 62: return NO_CONDITIONAL_ORDER_RIGHT;
        case 63: return AUTH_FAILED;
        case 64: return NOT_AUTHENT;
        case 65: return SWAPORDER_UNSUPPORTED;
        case 66: return OPTIONS_ONLY_SUPPORT_SPEC;
        case 67: return DUPLICATE_EXECORDER_REF;
        case 68: return RESEND_EXECORDER_BROKERINVESTOR_NOTMATCH;
        case 69: return EXECORDER_NOTOPTIONS;
        case 70: return OPTIONS_NOT_SUPPORT_EXEC;
        case 71: return BAD_EXECORDER_ACTION_FIELD;
        case 72: return DUPLICATE_EXECORDER_ACTION_REF;
        case 73: return EXECORDER_NOT_FOUND;
        case 74: return OVER_EXECUTE_POSITION;
        case 75: return LOGIN_FORBIDDEN;
        case 76: return INVALID_TRANSFER_AGENT;
        case 77: return NO_FOUND_FUNCTION;
        case 78: return SEND_EXCHANGEORDER_FAILED;
        case 79: return SEND_EXCHANGEORDERACTION_FAILED;
        case 80: return PRICETYPE_NOTSUPPORT_BYEXCHANGE;
        case 81: return BAD_EXECUTE_TYPE;
        case 82: return BAD_OPTION_INSTR;
        case 83: return INSTR_NOTSUPPORT_FORQUOTE;
        case 84: return RESEND_QUOTE_BROKERINVESTOR_NOTMATCH;
        case 85: return INSTR_NOTSUPPORT_QUOTE;
        case 86: return QUOTE_NOT_FOUND;
        case 87: return OPTIONS_NOT_SUPPORT_ABANDON;
        case 88: return COMBOPTIONS_SUPPORT_IOC_ONLY;
        case 89: return OPEN_FILE_FAILED;
        case 90: return NEED_RETRY;
        case 91: return EXCHANGE_RTNERROR;
        case 92: return QUOTE_DERIVEDORDER_ACTIONERROR;
        case 93: return INSTRUMENTMAP_NOT_FOUND;
        case 101: return NO_TRADING_RIGHT_IN_SEPC_DR;
        case 102: return NO_DR_NO;
        case 1000: return SEND_INSTITUTION_CODE_ERROR;
        case 1001: return NO_GET_PLATFORM_SN;
        case 1002: return ILLEGAL_TRANSFER_BANK;
        case 1003: return ALREADY_OPEN_ACCOUNT;
        case 1004: return NOT_OPEN_ACCOUNT;
        case 1005: return PROCESSING;
        case 1006: return OVERTIME;
        case 1007: return RECORD_NOT_FOUND;
        case 1008: return NO_FOUND_REVERSAL_ORIGINAL_TRANSACTION;
        case 1009: return CONNECT_HOST_FAILED;
        case 1010: return SEND_FAILED;
        case 1011: return LATE_RESPONSE;
        case 1012: return REVERSAL_BANKID_NOT_MATCH;
        case 1013: return REVERSAL_BANKACCOUNT_NOT_MATCH;
        case 1014: return REVERSAL_BROKERID_NOT_MATCH;
        case 1015: return REVERSAL_ACCOUNTID_NOT_MATCH;
        case 1016: return REVERSAL_AMOUNT_NOT_MATCH;
        case 1017: return DB_OPERATION_FAILED;
        case 1018: return SEND_ASP_FAILURE;
        case 1019: return NOT_SIGNIN;
        case 1020: return ALREADY_SIGNIN;
        case 1021: return AMOUNT_OR_TIMES_OVER;
        case 1022: return NOT_IN_TRANSFER_TIME;
        case 1023: return BANK_SERVER_ERROR;
        case 1024: return BANK_SERIAL_IS_REPEALED;
        case 1025: return BANK_SERIAL_NOT_EXIST;
        case 1026: return NOT_ORGAN_MAP;
        case 1027: return EXIST_TRANSFER;
        case 1028: return BANK_FORBID_REVERSAL;
        case 1029: return DUP_BANK_SERIAL;
        case 1030: return FBT_SYSTEM_BUSY;
        case 1031: return MACKEY_SYNCING;
        case 1032: return ACCOUNTID_ALREADY_REGISTER;
        case 1033: return BANKACCOUNT_ALREADY_REGISTER;
        case 1034: return DUP_BANK_SERIAL_REDO_OK;
        case 1035: return CURRENCYID_NOT_SUPPORTED;
        case 1036: return INVALID_MAC;
        case 1037: return NOT_SUPPORT_SECAGENT_BY_BANK;
        case 1038: return PINKEY_SYNCING;
        case 1039: return SECAGENT_QUERY_BY_CCB;
        case 2000: return NO_VALID_BANKOFFER_AVAILABLE;
        case 2001: return PASSWORD_MISMATCH;
        case 2004: return DUPLATION_BANK_SERIAL;
        case 2005: return DUPLATION_OFFER_SERIAL;
        case 2006: return SERIAL_NOT_EXSIT;
        case 2007: return SERIAL_IS_REPEALED;
        case 2008: return SERIAL_MISMATCH;
        case 2009: return IdentifiedCardNo_MISMATCH;
        case 2011: return ACCOUNT_NOT_FUND;
        case 2012: return ACCOUNT_NOT_ACTIVE;
        case 2013: return NOT_ALLOW_REPEAL_BYMANUAL;
        case 2014: return AMOUNT_OUTOFTHEWAY;
        case 2015: return EXCHANGERATE_NOT_FOUND;
        case 999999: return WAITING_OFFER_RSP;
        case 3001: return FBE_NO_GET_PLATFORM_SN;
        case 3002: return FBE_ILLEGAL_TRANSFER_BANK;
        case 3005: return FBE_PROCESSING;
        case 3006: return FBE_OVERTIME;
        case 3007: return FBE_RECORD_NOT_FOUND;
        case 3009: return FBE_CONNECT_HOST_FAILED;
        case 3010: return FBE_SEND_FAILED;
        case 3011: return FBE_LATE_RESPONSE;
        case 3017: return FBE_DB_OPERATION_FAILED;
        case 3019: return FBE_NOT_SIGNIN;
        case 3020: return FBE_ALREADY_SIGNIN;
        case 3021: return FBE_AMOUNT_OR_TIMES_OVER;
        case 3022: return FBE_NOT_IN_TRANSFER_TIME;
        case 3023: return FBE_BANK_SERVER_ERROR;
        case 3026: return FBE_NOT_ORGAN_MAP;
        case 3030: return FBE_SYSTEM_BUSY;
        case 3035: return FBE_CURRENCYID_NOT_SUPPORTED;
        case 3036: return FBE_WRONG_BANK_ACCOUNT;
        case 3037: return FBE_BANK_ACCOUNT_NO_FUNDS;
        case 3038: return FBE_DUP_CERT_NO;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CTPRespCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CTPRespCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CTPRespCode>() {
            public CTPRespCode findValueByNumber(int number) {
              return CTPRespCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.getDescriptor().getEnumTypes().get(0);
    }

    private static final CTPRespCode[] VALUES = values();

    public static CTPRespCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CTPRespCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.xceder.CTP.messages.CTPRespCode)
  }

  /**
   * Protobuf enum {@code com.xceder.CTP.messages.DISCONNECT_REASON}
   */
  public enum DISCONNECT_REASON
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CONNECT = 0;</code>
     */
    CONNECT(0),
    /**
     * <code>UNKNOWN_REASON = 1;</code>
     */
    UNKNOWN_REASON(1),
    /**
     * <code>LOGOUT_REASON = 2;</code>
     */
    LOGOUT_REASON(2),
    /**
     * <code>READING_FAIL = 4097;</code>
     */
    READING_FAIL(4097),
    /**
     * <code>WRITING_FAIL = 4098;</code>
     */
    WRITING_FAIL(4098),
    /**
     * <code>HEARTBEAT_TIMEOUT = 8193;</code>
     */
    HEARTBEAT_TIMEOUT(8193),
    /**
     * <code>HEARTBEAT_SEND_TIMEOUT = 8194;</code>
     */
    HEARTBEAT_SEND_TIMEOUT(8194),
    /**
     * <code>RECEIVE_ERROR = 819;</code>
     */
    RECEIVE_ERROR(819),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>CONNECT = 0;</code>
     */
    public static final int CONNECT_VALUE = 0;
    /**
     * <code>UNKNOWN_REASON = 1;</code>
     */
    public static final int UNKNOWN_REASON_VALUE = 1;
    /**
     * <code>LOGOUT_REASON = 2;</code>
     */
    public static final int LOGOUT_REASON_VALUE = 2;
    /**
     * <code>READING_FAIL = 4097;</code>
     */
    public static final int READING_FAIL_VALUE = 4097;
    /**
     * <code>WRITING_FAIL = 4098;</code>
     */
    public static final int WRITING_FAIL_VALUE = 4098;
    /**
     * <code>HEARTBEAT_TIMEOUT = 8193;</code>
     */
    public static final int HEARTBEAT_TIMEOUT_VALUE = 8193;
    /**
     * <code>HEARTBEAT_SEND_TIMEOUT = 8194;</code>
     */
    public static final int HEARTBEAT_SEND_TIMEOUT_VALUE = 8194;
    /**
     * <code>RECEIVE_ERROR = 819;</code>
     */
    public static final int RECEIVE_ERROR_VALUE = 819;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DISCONNECT_REASON valueOf(int value) {
      return forNumber(value);
    }

    public static DISCONNECT_REASON forNumber(int value) {
      switch (value) {
        case 0: return CONNECT;
        case 1: return UNKNOWN_REASON;
        case 2: return LOGOUT_REASON;
        case 4097: return READING_FAIL;
        case 4098: return WRITING_FAIL;
        case 8193: return HEARTBEAT_TIMEOUT;
        case 8194: return HEARTBEAT_SEND_TIMEOUT;
        case 819: return RECEIVE_ERROR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DISCONNECT_REASON>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DISCONNECT_REASON> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DISCONNECT_REASON>() {
            public DISCONNECT_REASON findValueByNumber(int number) {
              return DISCONNECT_REASON.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.getDescriptor().getEnumTypes().get(1);
    }

    private static final DISCONNECT_REASON[] VALUES = values();

    public static DISCONNECT_REASON valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DISCONNECT_REASON(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.xceder.CTP.messages.DISCONNECT_REASON)
  }

  /**
   * Protobuf enum {@code com.xceder.CTP.messages.REQ_CODE}
   */
  public enum REQ_CODE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <code>QUEUEING = 1;</code>
     */
    QUEUEING(1),
    /**
     * <code>NETFAIL = 11;</code>
     */
    NETFAIL(11),
    /**
     * <code>EXCEED_PENDING_QUOTA = 12;</code>
     */
    EXCEED_PENDING_QUOTA(12),
    /**
     * <code>EXCEED_REQ_FREQUENCY = 13;</code>
     */
    EXCEED_REQ_FREQUENCY(13),
    /**
     * <code>NOT_INIT = 100;</code>
     */
    NOT_INIT(100),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <code>QUEUEING = 1;</code>
     */
    public static final int QUEUEING_VALUE = 1;
    /**
     * <code>NETFAIL = 11;</code>
     */
    public static final int NETFAIL_VALUE = 11;
    /**
     * <code>EXCEED_PENDING_QUOTA = 12;</code>
     */
    public static final int EXCEED_PENDING_QUOTA_VALUE = 12;
    /**
     * <code>EXCEED_REQ_FREQUENCY = 13;</code>
     */
    public static final int EXCEED_REQ_FREQUENCY_VALUE = 13;
    /**
     * <code>NOT_INIT = 100;</code>
     */
    public static final int NOT_INIT_VALUE = 100;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static REQ_CODE valueOf(int value) {
      return forNumber(value);
    }

    public static REQ_CODE forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return QUEUEING;
        case 11: return NETFAIL;
        case 12: return EXCEED_PENDING_QUOTA;
        case 13: return EXCEED_REQ_FREQUENCY;
        case 100: return NOT_INIT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<REQ_CODE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        REQ_CODE> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<REQ_CODE>() {
            public REQ_CODE findValueByNumber(int number) {
              return REQ_CODE.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.getDescriptor().getEnumTypes().get(2);
    }

    private static final REQ_CODE[] VALUES = values();

    public static REQ_CODE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private REQ_CODE(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.xceder.CTP.messages.REQ_CODE)
  }

  /**
   * Protobuf enum {@code com.xceder.CTP.messages.REQ_TYPE}
   */
  public enum REQ_TYPE
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN = 0;</code>
     */
    UNKNOWN(0),
    /**
     * <code>LOGIN = 1;</code>
     */
    LOGIN(1),
    /**
     * <code>LOGOUT = 2;</code>
     */
    LOGOUT(2),
    /**
     * <code>PRICE = 3;</code>
     */
    PRICE(3),
    /**
     * <code>ORDER = 4;</code>
     */
    ORDER(4),
    /**
     * <code>QUERY = 5;</code>
     */
    QUERY(5),
    /**
     * <code>ACCOUNT = 6;</code>
     */
    ACCOUNT(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNKNOWN = 0;</code>
     */
    public static final int UNKNOWN_VALUE = 0;
    /**
     * <code>LOGIN = 1;</code>
     */
    public static final int LOGIN_VALUE = 1;
    /**
     * <code>LOGOUT = 2;</code>
     */
    public static final int LOGOUT_VALUE = 2;
    /**
     * <code>PRICE = 3;</code>
     */
    public static final int PRICE_VALUE = 3;
    /**
     * <code>ORDER = 4;</code>
     */
    public static final int ORDER_VALUE = 4;
    /**
     * <code>QUERY = 5;</code>
     */
    public static final int QUERY_VALUE = 5;
    /**
     * <code>ACCOUNT = 6;</code>
     */
    public static final int ACCOUNT_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static REQ_TYPE valueOf(int value) {
      return forNumber(value);
    }

    public static REQ_TYPE forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return LOGIN;
        case 2: return LOGOUT;
        case 3: return PRICE;
        case 4: return ORDER;
        case 5: return QUERY;
        case 6: return ACCOUNT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<REQ_TYPE>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        REQ_TYPE> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<REQ_TYPE>() {
            public REQ_TYPE findValueByNumber(int number) {
              return REQ_TYPE.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.getDescriptor().getEnumTypes().get(3);
    }

    private static final REQ_TYPE[] VALUES = values();

    public static REQ_TYPE valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private REQ_TYPE(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:com.xceder.CTP.messages.REQ_TYPE)
  }

  public interface ProcessTimeStampOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.ProcessTimeStamp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint64 createUTC = 1;</code>
     */
    long getCreateUTC();

    /**
     * <code>uint64 submitUTC = 2;</code>
     */
    long getSubmitUTC();

    /**
     * <code>uint64 responseUTC = 3;</code>
     */
    long getResponseUTC();
  }
  /**
   * <pre>
   *时间戳
   * </pre>
   *
   * Protobuf type {@code com.xceder.CTP.messages.ProcessTimeStamp}
   */
  public  static final class ProcessTimeStamp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.ProcessTimeStamp)
      ProcessTimeStampOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProcessTimeStamp.newBuilder() to construct.
    private ProcessTimeStamp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProcessTimeStamp() {
      createUTC_ = 0L;
      submitUTC_ = 0L;
      responseUTC_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProcessTimeStamp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              createUTC_ = input.readUInt64();
              break;
            }
            case 16: {

              submitUTC_ = input.readUInt64();
              break;
            }
            case 24: {

              responseUTC_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_ProcessTimeStamp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.ProcessTimeStamp.class, com.xceder.CTP.messages.CTP.ProcessTimeStamp.Builder.class);
    }

    public static final int CREATEUTC_FIELD_NUMBER = 1;
    private long createUTC_;
    /**
     * <code>uint64 createUTC = 1;</code>
     */
    public long getCreateUTC() {
      return createUTC_;
    }

    public static final int SUBMITUTC_FIELD_NUMBER = 2;
    private long submitUTC_;
    /**
     * <code>uint64 submitUTC = 2;</code>
     */
    public long getSubmitUTC() {
      return submitUTC_;
    }

    public static final int RESPONSEUTC_FIELD_NUMBER = 3;
    private long responseUTC_;
    /**
     * <code>uint64 responseUTC = 3;</code>
     */
    public long getResponseUTC() {
      return responseUTC_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (createUTC_ != 0L) {
        output.writeUInt64(1, createUTC_);
      }
      if (submitUTC_ != 0L) {
        output.writeUInt64(2, submitUTC_);
      }
      if (responseUTC_ != 0L) {
        output.writeUInt64(3, responseUTC_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (createUTC_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, createUTC_);
      }
      if (submitUTC_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, submitUTC_);
      }
      if (responseUTC_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, responseUTC_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.ProcessTimeStamp)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.ProcessTimeStamp other = (com.xceder.CTP.messages.CTP.ProcessTimeStamp) obj;

      boolean result = true;
      result = result && (getCreateUTC()
          == other.getCreateUTC());
      result = result && (getSubmitUTC()
          == other.getSubmitUTC());
      result = result && (getResponseUTC()
          == other.getResponseUTC());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CREATEUTC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCreateUTC());
      hash = (37 * hash) + SUBMITUTC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSubmitUTC());
      hash = (37 * hash) + RESPONSEUTC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getResponseUTC());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.ProcessTimeStamp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *时间戳
     * </pre>
     *
     * Protobuf type {@code com.xceder.CTP.messages.ProcessTimeStamp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.ProcessTimeStamp)
        com.xceder.CTP.messages.CTP.ProcessTimeStampOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_ProcessTimeStamp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.ProcessTimeStamp.class, com.xceder.CTP.messages.CTP.ProcessTimeStamp.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.ProcessTimeStamp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        createUTC_ = 0L;

        submitUTC_ = 0L;

        responseUTC_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor;
      }

      public com.xceder.CTP.messages.CTP.ProcessTimeStamp getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.ProcessTimeStamp.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.ProcessTimeStamp build() {
        com.xceder.CTP.messages.CTP.ProcessTimeStamp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.ProcessTimeStamp buildPartial() {
        com.xceder.CTP.messages.CTP.ProcessTimeStamp result = new com.xceder.CTP.messages.CTP.ProcessTimeStamp(this);
        result.createUTC_ = createUTC_;
        result.submitUTC_ = submitUTC_;
        result.responseUTC_ = responseUTC_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.ProcessTimeStamp) {
          return mergeFrom((com.xceder.CTP.messages.CTP.ProcessTimeStamp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.ProcessTimeStamp other) {
        if (other == com.xceder.CTP.messages.CTP.ProcessTimeStamp.getDefaultInstance()) return this;
        if (other.getCreateUTC() != 0L) {
          setCreateUTC(other.getCreateUTC());
        }
        if (other.getSubmitUTC() != 0L) {
          setSubmitUTC(other.getSubmitUTC());
        }
        if (other.getResponseUTC() != 0L) {
          setResponseUTC(other.getResponseUTC());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.ProcessTimeStamp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.ProcessTimeStamp) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long createUTC_ ;
      /**
       * <code>uint64 createUTC = 1;</code>
       */
      public long getCreateUTC() {
        return createUTC_;
      }
      /**
       * <code>uint64 createUTC = 1;</code>
       */
      public Builder setCreateUTC(long value) {
        
        createUTC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 createUTC = 1;</code>
       */
      public Builder clearCreateUTC() {
        
        createUTC_ = 0L;
        onChanged();
        return this;
      }

      private long submitUTC_ ;
      /**
       * <code>uint64 submitUTC = 2;</code>
       */
      public long getSubmitUTC() {
        return submitUTC_;
      }
      /**
       * <code>uint64 submitUTC = 2;</code>
       */
      public Builder setSubmitUTC(long value) {
        
        submitUTC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 submitUTC = 2;</code>
       */
      public Builder clearSubmitUTC() {
        
        submitUTC_ = 0L;
        onChanged();
        return this;
      }

      private long responseUTC_ ;
      /**
       * <code>uint64 responseUTC = 3;</code>
       */
      public long getResponseUTC() {
        return responseUTC_;
      }
      /**
       * <code>uint64 responseUTC = 3;</code>
       */
      public Builder setResponseUTC(long value) {
        
        responseUTC_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint64 responseUTC = 3;</code>
       */
      public Builder clearResponseUTC() {
        
        responseUTC_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.ProcessTimeStamp)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.ProcessTimeStamp)
    private static final com.xceder.CTP.messages.CTP.ProcessTimeStamp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.ProcessTimeStamp();
    }

    public static com.xceder.CTP.messages.CTP.ProcessTimeStamp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProcessTimeStamp>
        PARSER = new com.google.protobuf.AbstractParser<ProcessTimeStamp>() {
      public ProcessTimeStamp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProcessTimeStamp(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProcessTimeStamp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProcessTimeStamp> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.ProcessTimeStamp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RespondOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.Respond)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
     */
    int getRespondErrorValue();
    /**
     * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
     */
    com.xceder.CTP.messages.CTP.CTPRespCode getRespondError();

    /**
     * <code>string respondMsg = 2;</code>
     */
    java.lang.String getRespondMsg();
    /**
     * <code>string respondMsg = 2;</code>
     */
    com.google.protobuf.ByteString
        getRespondMsgBytes();
  }
  /**
   * Protobuf type {@code com.xceder.CTP.messages.Respond}
   */
  public  static final class Respond extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.Respond)
      RespondOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Respond.newBuilder() to construct.
    private Respond(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Respond() {
      respondError_ = 0;
      respondMsg_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Respond(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();

              respondError_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              respondMsg_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_Respond_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_Respond_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.Respond.class, com.xceder.CTP.messages.CTP.Respond.Builder.class);
    }

    public static final int RESPONDERROR_FIELD_NUMBER = 1;
    private int respondError_;
    /**
     * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
     */
    public int getRespondErrorValue() {
      return respondError_;
    }
    /**
     * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
     */
    public com.xceder.CTP.messages.CTP.CTPRespCode getRespondError() {
      com.xceder.CTP.messages.CTP.CTPRespCode result = com.xceder.CTP.messages.CTP.CTPRespCode.valueOf(respondError_);
      return result == null ? com.xceder.CTP.messages.CTP.CTPRespCode.UNRECOGNIZED : result;
    }

    public static final int RESPONDMSG_FIELD_NUMBER = 2;
    private volatile java.lang.Object respondMsg_;
    /**
     * <code>string respondMsg = 2;</code>
     */
    public java.lang.String getRespondMsg() {
      java.lang.Object ref = respondMsg_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        respondMsg_ = s;
        return s;
      }
    }
    /**
     * <code>string respondMsg = 2;</code>
     */
    public com.google.protobuf.ByteString
        getRespondMsgBytes() {
      java.lang.Object ref = respondMsg_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        respondMsg_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (respondError_ != com.xceder.CTP.messages.CTP.CTPRespCode.NONE.getNumber()) {
        output.writeEnum(1, respondError_);
      }
      if (!getRespondMsgBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, respondMsg_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (respondError_ != com.xceder.CTP.messages.CTP.CTPRespCode.NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, respondError_);
      }
      if (!getRespondMsgBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, respondMsg_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.Respond)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.Respond other = (com.xceder.CTP.messages.CTP.Respond) obj;

      boolean result = true;
      result = result && respondError_ == other.respondError_;
      result = result && getRespondMsg()
          .equals(other.getRespondMsg());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RESPONDERROR_FIELD_NUMBER;
      hash = (53 * hash) + respondError_;
      hash = (37 * hash) + RESPONDMSG_FIELD_NUMBER;
      hash = (53 * hash) + getRespondMsg().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.Respond parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.Respond prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.xceder.CTP.messages.Respond}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.Respond)
        com.xceder.CTP.messages.CTP.RespondOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_Respond_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_Respond_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.Respond.class, com.xceder.CTP.messages.CTP.Respond.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.Respond.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        respondError_ = 0;

        respondMsg_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_Respond_descriptor;
      }

      public com.xceder.CTP.messages.CTP.Respond getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.Respond.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.Respond build() {
        com.xceder.CTP.messages.CTP.Respond result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.Respond buildPartial() {
        com.xceder.CTP.messages.CTP.Respond result = new com.xceder.CTP.messages.CTP.Respond(this);
        result.respondError_ = respondError_;
        result.respondMsg_ = respondMsg_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.Respond) {
          return mergeFrom((com.xceder.CTP.messages.CTP.Respond)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.Respond other) {
        if (other == com.xceder.CTP.messages.CTP.Respond.getDefaultInstance()) return this;
        if (other.respondError_ != 0) {
          setRespondErrorValue(other.getRespondErrorValue());
        }
        if (!other.getRespondMsg().isEmpty()) {
          respondMsg_ = other.respondMsg_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.Respond parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.Respond) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int respondError_ = 0;
      /**
       * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
       */
      public int getRespondErrorValue() {
        return respondError_;
      }
      /**
       * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
       */
      public Builder setRespondErrorValue(int value) {
        respondError_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
       */
      public com.xceder.CTP.messages.CTP.CTPRespCode getRespondError() {
        com.xceder.CTP.messages.CTP.CTPRespCode result = com.xceder.CTP.messages.CTP.CTPRespCode.valueOf(respondError_);
        return result == null ? com.xceder.CTP.messages.CTP.CTPRespCode.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
       */
      public Builder setRespondError(com.xceder.CTP.messages.CTP.CTPRespCode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        respondError_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.xceder.CTP.messages.CTPRespCode respondError = 1;</code>
       */
      public Builder clearRespondError() {
        
        respondError_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object respondMsg_ = "";
      /**
       * <code>string respondMsg = 2;</code>
       */
      public java.lang.String getRespondMsg() {
        java.lang.Object ref = respondMsg_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          respondMsg_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string respondMsg = 2;</code>
       */
      public com.google.protobuf.ByteString
          getRespondMsgBytes() {
        java.lang.Object ref = respondMsg_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          respondMsg_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string respondMsg = 2;</code>
       */
      public Builder setRespondMsg(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        respondMsg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string respondMsg = 2;</code>
       */
      public Builder clearRespondMsg() {
        
        respondMsg_ = getDefaultInstance().getRespondMsg();
        onChanged();
        return this;
      }
      /**
       * <code>string respondMsg = 2;</code>
       */
      public Builder setRespondMsgBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        respondMsg_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.Respond)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.Respond)
    private static final com.xceder.CTP.messages.CTP.Respond DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.Respond();
    }

    public static com.xceder.CTP.messages.CTP.Respond getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Respond>
        PARSER = new com.google.protobuf.AbstractParser<Respond>() {
      public Respond parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Respond(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Respond> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Respond> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.Respond getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LoginParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.LoginParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string broker = 1;</code>
     */
    java.lang.String getBroker();
    /**
     * <code>string broker = 1;</code>
     */
    com.google.protobuf.ByteString
        getBrokerBytes();

    /**
     * <code>string user = 2;</code>
     */
    java.lang.String getUser();
    /**
     * <code>string user = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserBytes();

    /**
     * <code>string password = 3;</code>
     */
    java.lang.String getPassword();
    /**
     * <code>string password = 3;</code>
     */
    com.google.protobuf.ByteString
        getPasswordBytes();
  }
  /**
   * <pre>
   *登录参数
   * </pre>
   *
   * Protobuf type {@code com.xceder.CTP.messages.LoginParam}
   */
  public  static final class LoginParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.LoginParam)
      LoginParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LoginParam.newBuilder() to construct.
    private LoginParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LoginParam() {
      broker_ = "";
      user_ = "";
      password_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LoginParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              broker_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              user_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              password_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_LoginParam_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_LoginParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.LoginParam.class, com.xceder.CTP.messages.CTP.LoginParam.Builder.class);
    }

    public static final int BROKER_FIELD_NUMBER = 1;
    private volatile java.lang.Object broker_;
    /**
     * <code>string broker = 1;</code>
     */
    public java.lang.String getBroker() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        broker_ = s;
        return s;
      }
    }
    /**
     * <code>string broker = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBrokerBytes() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        broker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USER_FIELD_NUMBER = 2;
    private volatile java.lang.Object user_;
    /**
     * <code>string user = 2;</code>
     */
    public java.lang.String getUser() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        user_ = s;
        return s;
      }
    }
    /**
     * <code>string user = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserBytes() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        user_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PASSWORD_FIELD_NUMBER = 3;
    private volatile java.lang.Object password_;
    /**
     * <code>string password = 3;</code>
     */
    public java.lang.String getPassword() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        password_ = s;
        return s;
      }
    }
    /**
     * <code>string password = 3;</code>
     */
    public com.google.protobuf.ByteString
        getPasswordBytes() {
      java.lang.Object ref = password_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        password_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getBrokerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, user_);
      }
      if (!getPasswordBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, password_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getBrokerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, user_);
      }
      if (!getPasswordBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, password_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.LoginParam)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.LoginParam other = (com.xceder.CTP.messages.CTP.LoginParam) obj;

      boolean result = true;
      result = result && getBroker()
          .equals(other.getBroker());
      result = result && getUser()
          .equals(other.getUser());
      result = result && getPassword()
          .equals(other.getPassword());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BROKER_FIELD_NUMBER;
      hash = (53 * hash) + getBroker().hashCode();
      hash = (37 * hash) + USER_FIELD_NUMBER;
      hash = (53 * hash) + getUser().hashCode();
      hash = (37 * hash) + PASSWORD_FIELD_NUMBER;
      hash = (53 * hash) + getPassword().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.LoginParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.LoginParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *登录参数
     * </pre>
     *
     * Protobuf type {@code com.xceder.CTP.messages.LoginParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.LoginParam)
        com.xceder.CTP.messages.CTP.LoginParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_LoginParam_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_LoginParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.LoginParam.class, com.xceder.CTP.messages.CTP.LoginParam.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.LoginParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        broker_ = "";

        user_ = "";

        password_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_LoginParam_descriptor;
      }

      public com.xceder.CTP.messages.CTP.LoginParam getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.LoginParam.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.LoginParam build() {
        com.xceder.CTP.messages.CTP.LoginParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.LoginParam buildPartial() {
        com.xceder.CTP.messages.CTP.LoginParam result = new com.xceder.CTP.messages.CTP.LoginParam(this);
        result.broker_ = broker_;
        result.user_ = user_;
        result.password_ = password_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.LoginParam) {
          return mergeFrom((com.xceder.CTP.messages.CTP.LoginParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.LoginParam other) {
        if (other == com.xceder.CTP.messages.CTP.LoginParam.getDefaultInstance()) return this;
        if (!other.getBroker().isEmpty()) {
          broker_ = other.broker_;
          onChanged();
        }
        if (!other.getUser().isEmpty()) {
          user_ = other.user_;
          onChanged();
        }
        if (!other.getPassword().isEmpty()) {
          password_ = other.password_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.LoginParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.LoginParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object broker_ = "";
      /**
       * <code>string broker = 1;</code>
       */
      public java.lang.String getBroker() {
        java.lang.Object ref = broker_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          broker_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBrokerBytes() {
        java.lang.Object ref = broker_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          broker_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBroker(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        broker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder clearBroker() {
        
        broker_ = getDefaultInstance().getBroker();
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBrokerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        broker_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object user_ = "";
      /**
       * <code>string user = 2;</code>
       */
      public java.lang.String getUser() {
        java.lang.Object ref = user_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          user_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserBytes() {
        java.lang.Object ref = user_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          user_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUser(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        user_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder clearUser() {
        
        user_ = getDefaultInstance().getUser();
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUserBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        user_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object password_ = "";
      /**
       * <code>string password = 3;</code>
       */
      public java.lang.String getPassword() {
        java.lang.Object ref = password_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          password_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string password = 3;</code>
       */
      public com.google.protobuf.ByteString
          getPasswordBytes() {
        java.lang.Object ref = password_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          password_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string password = 3;</code>
       */
      public Builder setPassword(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        password_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string password = 3;</code>
       */
      public Builder clearPassword() {
        
        password_ = getDefaultInstance().getPassword();
        onChanged();
        return this;
      }
      /**
       * <code>string password = 3;</code>
       */
      public Builder setPasswordBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        password_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.LoginParam)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.LoginParam)
    private static final com.xceder.CTP.messages.CTP.LoginParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.LoginParam();
    }

    public static com.xceder.CTP.messages.CTP.LoginParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LoginParam>
        PARSER = new com.google.protobuf.AbstractParser<LoginParam>() {
      public LoginParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LoginParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LoginParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LoginParam> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.LoginParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PriceRequestParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.PriceRequestParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bool inSubscribe = 1;</code>
     */
    boolean getInSubscribe();

    /**
     * <code>string symbol = 2;</code>
     */
    java.lang.String getSymbol();
    /**
     * <code>string symbol = 2;</code>
     */
    com.google.protobuf.ByteString
        getSymbolBytes();
  }
  /**
   * Protobuf type {@code com.xceder.CTP.messages.PriceRequestParam}
   */
  public  static final class PriceRequestParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.PriceRequestParam)
      PriceRequestParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PriceRequestParam.newBuilder() to construct.
    private PriceRequestParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PriceRequestParam() {
      inSubscribe_ = false;
      symbol_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PriceRequestParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              inSubscribe_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              symbol_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_PriceRequestParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.PriceRequestParam.class, com.xceder.CTP.messages.CTP.PriceRequestParam.Builder.class);
    }

    public static final int INSUBSCRIBE_FIELD_NUMBER = 1;
    private boolean inSubscribe_;
    /**
     * <code>bool inSubscribe = 1;</code>
     */
    public boolean getInSubscribe() {
      return inSubscribe_;
    }

    public static final int SYMBOL_FIELD_NUMBER = 2;
    private volatile java.lang.Object symbol_;
    /**
     * <code>string symbol = 2;</code>
     */
    public java.lang.String getSymbol() {
      java.lang.Object ref = symbol_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        symbol_ = s;
        return s;
      }
    }
    /**
     * <code>string symbol = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSymbolBytes() {
      java.lang.Object ref = symbol_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        symbol_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (inSubscribe_ != false) {
        output.writeBool(1, inSubscribe_);
      }
      if (!getSymbolBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, symbol_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (inSubscribe_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, inSubscribe_);
      }
      if (!getSymbolBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, symbol_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.PriceRequestParam)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.PriceRequestParam other = (com.xceder.CTP.messages.CTP.PriceRequestParam) obj;

      boolean result = true;
      result = result && (getInSubscribe()
          == other.getInSubscribe());
      result = result && getSymbol()
          .equals(other.getSymbol());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + INSUBSCRIBE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInSubscribe());
      hash = (37 * hash) + SYMBOL_FIELD_NUMBER;
      hash = (53 * hash) + getSymbol().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.PriceRequestParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.PriceRequestParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.xceder.CTP.messages.PriceRequestParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.PriceRequestParam)
        com.xceder.CTP.messages.CTP.PriceRequestParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_PriceRequestParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.PriceRequestParam.class, com.xceder.CTP.messages.CTP.PriceRequestParam.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.PriceRequestParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        inSubscribe_ = false;

        symbol_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor;
      }

      public com.xceder.CTP.messages.CTP.PriceRequestParam getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.PriceRequestParam.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.PriceRequestParam build() {
        com.xceder.CTP.messages.CTP.PriceRequestParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.PriceRequestParam buildPartial() {
        com.xceder.CTP.messages.CTP.PriceRequestParam result = new com.xceder.CTP.messages.CTP.PriceRequestParam(this);
        result.inSubscribe_ = inSubscribe_;
        result.symbol_ = symbol_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.PriceRequestParam) {
          return mergeFrom((com.xceder.CTP.messages.CTP.PriceRequestParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.PriceRequestParam other) {
        if (other == com.xceder.CTP.messages.CTP.PriceRequestParam.getDefaultInstance()) return this;
        if (other.getInSubscribe() != false) {
          setInSubscribe(other.getInSubscribe());
        }
        if (!other.getSymbol().isEmpty()) {
          symbol_ = other.symbol_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.PriceRequestParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.PriceRequestParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean inSubscribe_ ;
      /**
       * <code>bool inSubscribe = 1;</code>
       */
      public boolean getInSubscribe() {
        return inSubscribe_;
      }
      /**
       * <code>bool inSubscribe = 1;</code>
       */
      public Builder setInSubscribe(boolean value) {
        
        inSubscribe_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bool inSubscribe = 1;</code>
       */
      public Builder clearInSubscribe() {
        
        inSubscribe_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object symbol_ = "";
      /**
       * <code>string symbol = 2;</code>
       */
      public java.lang.String getSymbol() {
        java.lang.Object ref = symbol_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          symbol_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string symbol = 2;</code>
       */
      public com.google.protobuf.ByteString
          getSymbolBytes() {
        java.lang.Object ref = symbol_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          symbol_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string symbol = 2;</code>
       */
      public Builder setSymbol(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        symbol_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string symbol = 2;</code>
       */
      public Builder clearSymbol() {
        
        symbol_ = getDefaultInstance().getSymbol();
        onChanged();
        return this;
      }
      /**
       * <code>string symbol = 2;</code>
       */
      public Builder setSymbolBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        symbol_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.PriceRequestParam)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.PriceRequestParam)
    private static final com.xceder.CTP.messages.CTP.PriceRequestParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.PriceRequestParam();
    }

    public static com.xceder.CTP.messages.CTP.PriceRequestParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PriceRequestParam>
        PARSER = new com.google.protobuf.AbstractParser<PriceRequestParam>() {
      public PriceRequestParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PriceRequestParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PriceRequestParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PriceRequestParam> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.PriceRequestParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SettleInfoParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.SettleInfoParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string broker = 1;</code>
     */
    java.lang.String getBroker();
    /**
     * <code>string broker = 1;</code>
     */
    com.google.protobuf.ByteString
        getBrokerBytes();

    /**
     * <code>string user = 2;</code>
     */
    java.lang.String getUser();
    /**
     * <code>string user = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserBytes();

    /**
     * <code>string settleDay = 3;</code>
     */
    java.lang.String getSettleDay();
    /**
     * <code>string settleDay = 3;</code>
     */
    com.google.protobuf.ByteString
        getSettleDayBytes();
  }
  /**
   * Protobuf type {@code com.xceder.CTP.messages.SettleInfoParam}
   */
  public  static final class SettleInfoParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.SettleInfoParam)
      SettleInfoParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SettleInfoParam.newBuilder() to construct.
    private SettleInfoParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SettleInfoParam() {
      broker_ = "";
      user_ = "";
      settleDay_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SettleInfoParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              broker_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              user_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              settleDay_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_SettleInfoParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.SettleInfoParam.class, com.xceder.CTP.messages.CTP.SettleInfoParam.Builder.class);
    }

    public static final int BROKER_FIELD_NUMBER = 1;
    private volatile java.lang.Object broker_;
    /**
     * <code>string broker = 1;</code>
     */
    public java.lang.String getBroker() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        broker_ = s;
        return s;
      }
    }
    /**
     * <code>string broker = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBrokerBytes() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        broker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USER_FIELD_NUMBER = 2;
    private volatile java.lang.Object user_;
    /**
     * <code>string user = 2;</code>
     */
    public java.lang.String getUser() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        user_ = s;
        return s;
      }
    }
    /**
     * <code>string user = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserBytes() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        user_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SETTLEDAY_FIELD_NUMBER = 3;
    private volatile java.lang.Object settleDay_;
    /**
     * <code>string settleDay = 3;</code>
     */
    public java.lang.String getSettleDay() {
      java.lang.Object ref = settleDay_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        settleDay_ = s;
        return s;
      }
    }
    /**
     * <code>string settleDay = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSettleDayBytes() {
      java.lang.Object ref = settleDay_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        settleDay_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getBrokerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, user_);
      }
      if (!getSettleDayBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, settleDay_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getBrokerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, user_);
      }
      if (!getSettleDayBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, settleDay_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.SettleInfoParam)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.SettleInfoParam other = (com.xceder.CTP.messages.CTP.SettleInfoParam) obj;

      boolean result = true;
      result = result && getBroker()
          .equals(other.getBroker());
      result = result && getUser()
          .equals(other.getUser());
      result = result && getSettleDay()
          .equals(other.getSettleDay());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BROKER_FIELD_NUMBER;
      hash = (53 * hash) + getBroker().hashCode();
      hash = (37 * hash) + USER_FIELD_NUMBER;
      hash = (53 * hash) + getUser().hashCode();
      hash = (37 * hash) + SETTLEDAY_FIELD_NUMBER;
      hash = (53 * hash) + getSettleDay().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.SettleInfoParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.SettleInfoParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.xceder.CTP.messages.SettleInfoParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.SettleInfoParam)
        com.xceder.CTP.messages.CTP.SettleInfoParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_SettleInfoParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.SettleInfoParam.class, com.xceder.CTP.messages.CTP.SettleInfoParam.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.SettleInfoParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        broker_ = "";

        user_ = "";

        settleDay_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor;
      }

      public com.xceder.CTP.messages.CTP.SettleInfoParam getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.SettleInfoParam.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.SettleInfoParam build() {
        com.xceder.CTP.messages.CTP.SettleInfoParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.SettleInfoParam buildPartial() {
        com.xceder.CTP.messages.CTP.SettleInfoParam result = new com.xceder.CTP.messages.CTP.SettleInfoParam(this);
        result.broker_ = broker_;
        result.user_ = user_;
        result.settleDay_ = settleDay_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.SettleInfoParam) {
          return mergeFrom((com.xceder.CTP.messages.CTP.SettleInfoParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.SettleInfoParam other) {
        if (other == com.xceder.CTP.messages.CTP.SettleInfoParam.getDefaultInstance()) return this;
        if (!other.getBroker().isEmpty()) {
          broker_ = other.broker_;
          onChanged();
        }
        if (!other.getUser().isEmpty()) {
          user_ = other.user_;
          onChanged();
        }
        if (!other.getSettleDay().isEmpty()) {
          settleDay_ = other.settleDay_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.SettleInfoParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.SettleInfoParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object broker_ = "";
      /**
       * <code>string broker = 1;</code>
       */
      public java.lang.String getBroker() {
        java.lang.Object ref = broker_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          broker_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBrokerBytes() {
        java.lang.Object ref = broker_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          broker_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBroker(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        broker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder clearBroker() {
        
        broker_ = getDefaultInstance().getBroker();
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBrokerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        broker_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object user_ = "";
      /**
       * <code>string user = 2;</code>
       */
      public java.lang.String getUser() {
        java.lang.Object ref = user_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          user_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserBytes() {
        java.lang.Object ref = user_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          user_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUser(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        user_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder clearUser() {
        
        user_ = getDefaultInstance().getUser();
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUserBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        user_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object settleDay_ = "";
      /**
       * <code>string settleDay = 3;</code>
       */
      public java.lang.String getSettleDay() {
        java.lang.Object ref = settleDay_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          settleDay_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string settleDay = 3;</code>
       */
      public com.google.protobuf.ByteString
          getSettleDayBytes() {
        java.lang.Object ref = settleDay_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          settleDay_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string settleDay = 3;</code>
       */
      public Builder setSettleDay(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        settleDay_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string settleDay = 3;</code>
       */
      public Builder clearSettleDay() {
        
        settleDay_ = getDefaultInstance().getSettleDay();
        onChanged();
        return this;
      }
      /**
       * <code>string settleDay = 3;</code>
       */
      public Builder setSettleDayBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        settleDay_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.SettleInfoParam)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.SettleInfoParam)
    private static final com.xceder.CTP.messages.CTP.SettleInfoParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.SettleInfoParam();
    }

    public static com.xceder.CTP.messages.CTP.SettleInfoParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SettleInfoParam>
        PARSER = new com.google.protobuf.AbstractParser<SettleInfoParam>() {
      public SettleInfoParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SettleInfoParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SettleInfoParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SettleInfoParam> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.SettleInfoParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TradingAccountParamOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.TradingAccountParam)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string broker = 1;</code>
     */
    java.lang.String getBroker();
    /**
     * <code>string broker = 1;</code>
     */
    com.google.protobuf.ByteString
        getBrokerBytes();

    /**
     * <code>string user = 2;</code>
     */
    java.lang.String getUser();
    /**
     * <code>string user = 2;</code>
     */
    com.google.protobuf.ByteString
        getUserBytes();

    /**
     * <code>string currency = 3;</code>
     */
    java.lang.String getCurrency();
    /**
     * <code>string currency = 3;</code>
     */
    com.google.protobuf.ByteString
        getCurrencyBytes();
  }
  /**
   * Protobuf type {@code com.xceder.CTP.messages.TradingAccountParam}
   */
  public  static final class TradingAccountParam extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.TradingAccountParam)
      TradingAccountParamOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TradingAccountParam.newBuilder() to construct.
    private TradingAccountParam(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TradingAccountParam() {
      broker_ = "";
      user_ = "";
      currency_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TradingAccountParam(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              broker_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              user_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              currency_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_TradingAccountParam_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.TradingAccountParam.class, com.xceder.CTP.messages.CTP.TradingAccountParam.Builder.class);
    }

    public static final int BROKER_FIELD_NUMBER = 1;
    private volatile java.lang.Object broker_;
    /**
     * <code>string broker = 1;</code>
     */
    public java.lang.String getBroker() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        broker_ = s;
        return s;
      }
    }
    /**
     * <code>string broker = 1;</code>
     */
    public com.google.protobuf.ByteString
        getBrokerBytes() {
      java.lang.Object ref = broker_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        broker_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USER_FIELD_NUMBER = 2;
    private volatile java.lang.Object user_;
    /**
     * <code>string user = 2;</code>
     */
    public java.lang.String getUser() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        user_ = s;
        return s;
      }
    }
    /**
     * <code>string user = 2;</code>
     */
    public com.google.protobuf.ByteString
        getUserBytes() {
      java.lang.Object ref = user_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        user_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CURRENCY_FIELD_NUMBER = 3;
    private volatile java.lang.Object currency_;
    /**
     * <code>string currency = 3;</code>
     */
    public java.lang.String getCurrency() {
      java.lang.Object ref = currency_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        currency_ = s;
        return s;
      }
    }
    /**
     * <code>string currency = 3;</code>
     */
    public com.google.protobuf.ByteString
        getCurrencyBytes() {
      java.lang.Object ref = currency_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        currency_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getBrokerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, user_);
      }
      if (!getCurrencyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, currency_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getBrokerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, broker_);
      }
      if (!getUserBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, user_);
      }
      if (!getCurrencyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, currency_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.TradingAccountParam)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.TradingAccountParam other = (com.xceder.CTP.messages.CTP.TradingAccountParam) obj;

      boolean result = true;
      result = result && getBroker()
          .equals(other.getBroker());
      result = result && getUser()
          .equals(other.getUser());
      result = result && getCurrency()
          .equals(other.getCurrency());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BROKER_FIELD_NUMBER;
      hash = (53 * hash) + getBroker().hashCode();
      hash = (37 * hash) + USER_FIELD_NUMBER;
      hash = (53 * hash) + getUser().hashCode();
      hash = (37 * hash) + CURRENCY_FIELD_NUMBER;
      hash = (53 * hash) + getCurrency().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.TradingAccountParam parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.TradingAccountParam prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.xceder.CTP.messages.TradingAccountParam}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.TradingAccountParam)
        com.xceder.CTP.messages.CTP.TradingAccountParamOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_TradingAccountParam_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.TradingAccountParam.class, com.xceder.CTP.messages.CTP.TradingAccountParam.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.TradingAccountParam.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        broker_ = "";

        user_ = "";

        currency_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor;
      }

      public com.xceder.CTP.messages.CTP.TradingAccountParam getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.TradingAccountParam.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.TradingAccountParam build() {
        com.xceder.CTP.messages.CTP.TradingAccountParam result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.TradingAccountParam buildPartial() {
        com.xceder.CTP.messages.CTP.TradingAccountParam result = new com.xceder.CTP.messages.CTP.TradingAccountParam(this);
        result.broker_ = broker_;
        result.user_ = user_;
        result.currency_ = currency_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.TradingAccountParam) {
          return mergeFrom((com.xceder.CTP.messages.CTP.TradingAccountParam)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.TradingAccountParam other) {
        if (other == com.xceder.CTP.messages.CTP.TradingAccountParam.getDefaultInstance()) return this;
        if (!other.getBroker().isEmpty()) {
          broker_ = other.broker_;
          onChanged();
        }
        if (!other.getUser().isEmpty()) {
          user_ = other.user_;
          onChanged();
        }
        if (!other.getCurrency().isEmpty()) {
          currency_ = other.currency_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.TradingAccountParam parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.TradingAccountParam) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object broker_ = "";
      /**
       * <code>string broker = 1;</code>
       */
      public java.lang.String getBroker() {
        java.lang.Object ref = broker_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          broker_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public com.google.protobuf.ByteString
          getBrokerBytes() {
        java.lang.Object ref = broker_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          broker_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBroker(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        broker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder clearBroker() {
        
        broker_ = getDefaultInstance().getBroker();
        onChanged();
        return this;
      }
      /**
       * <code>string broker = 1;</code>
       */
      public Builder setBrokerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        broker_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object user_ = "";
      /**
       * <code>string user = 2;</code>
       */
      public java.lang.String getUser() {
        java.lang.Object ref = user_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          user_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public com.google.protobuf.ByteString
          getUserBytes() {
        java.lang.Object ref = user_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          user_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUser(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        user_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder clearUser() {
        
        user_ = getDefaultInstance().getUser();
        onChanged();
        return this;
      }
      /**
       * <code>string user = 2;</code>
       */
      public Builder setUserBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        user_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object currency_ = "";
      /**
       * <code>string currency = 3;</code>
       */
      public java.lang.String getCurrency() {
        java.lang.Object ref = currency_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          currency_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string currency = 3;</code>
       */
      public com.google.protobuf.ByteString
          getCurrencyBytes() {
        java.lang.Object ref = currency_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          currency_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string currency = 3;</code>
       */
      public Builder setCurrency(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        currency_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string currency = 3;</code>
       */
      public Builder clearCurrency() {
        
        currency_ = getDefaultInstance().getCurrency();
        onChanged();
        return this;
      }
      /**
       * <code>string currency = 3;</code>
       */
      public Builder setCurrencyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        currency_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.TradingAccountParam)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.TradingAccountParam)
    private static final com.xceder.CTP.messages.CTP.TradingAccountParam DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.TradingAccountParam();
    }

    public static com.xceder.CTP.messages.CTP.TradingAccountParam getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TradingAccountParam>
        PARSER = new com.google.protobuf.AbstractParser<TradingAccountParam>() {
      public TradingAccountParam parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TradingAccountParam(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TradingAccountParam> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TradingAccountParam> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.TradingAccountParam getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UserLoginResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.xceder.CTP.messages.UserLoginResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *&#47;交易日
     * </pre>
     *
     * <code>string TradingDay = 1;</code>
     */
    java.lang.String getTradingDay();
    /**
     * <pre>
     *&#47;交易日
     * </pre>
     *
     * <code>string TradingDay = 1;</code>
     */
    com.google.protobuf.ByteString
        getTradingDayBytes();

    /**
     * <pre>
     *&#47;登录成功时间
     * </pre>
     *
     * <code>string LoginTime = 2;</code>
     */
    java.lang.String getLoginTime();
    /**
     * <pre>
     *&#47;登录成功时间
     * </pre>
     *
     * <code>string LoginTime = 2;</code>
     */
    com.google.protobuf.ByteString
        getLoginTimeBytes();

    /**
     * <pre>
     *&#47;经纪公司代码
     * </pre>
     *
     * <code>string BrokerID = 3;</code>
     */
    java.lang.String getBrokerID();
    /**
     * <pre>
     *&#47;经纪公司代码
     * </pre>
     *
     * <code>string BrokerID = 3;</code>
     */
    com.google.protobuf.ByteString
        getBrokerIDBytes();

    /**
     * <pre>
     *&#47;用户代码
     * </pre>
     *
     * <code>string UserID = 4;</code>
     */
    java.lang.String getUserID();
    /**
     * <pre>
     *&#47;用户代码
     * </pre>
     *
     * <code>string UserID = 4;</code>
     */
    com.google.protobuf.ByteString
        getUserIDBytes();

    /**
     * <pre>
     *&#47;交易系统名称
     * </pre>
     *
     * <code>string SystemName = 5;</code>
     */
    java.lang.String getSystemName();
    /**
     * <pre>
     *&#47;交易系统名称
     * </pre>
     *
     * <code>string SystemName = 5;</code>
     */
    com.google.protobuf.ByteString
        getSystemNameBytes();

    /**
     * <pre>
     *&#47;前置编号
     * </pre>
     *
     * <code>int32 FrontID = 6;</code>
     */
    int getFrontID();

    /**
     * <pre>
     *&#47;会话编号
     * </pre>
     *
     * <code>int32 SessionID = 7;</code>
     */
    int getSessionID();

    /**
     * <pre>
     *&#47;最大报单引用
     * </pre>
     *
     * <code>string MaxOrderRef = 8;</code>
     */
    java.lang.String getMaxOrderRef();
    /**
     * <pre>
     *&#47;最大报单引用
     * </pre>
     *
     * <code>string MaxOrderRef = 8;</code>
     */
    com.google.protobuf.ByteString
        getMaxOrderRefBytes();

    /**
     * <pre>
     *&#47;上期所时间
     * </pre>
     *
     * <code>string SHFETime = 9;</code>
     */
    java.lang.String getSHFETime();
    /**
     * <pre>
     *&#47;上期所时间
     * </pre>
     *
     * <code>string SHFETime = 9;</code>
     */
    com.google.protobuf.ByteString
        getSHFETimeBytes();

    /**
     * <pre>
     *&#47;大商所时间
     * </pre>
     *
     * <code>string DCETime = 10;</code>
     */
    java.lang.String getDCETime();
    /**
     * <pre>
     *&#47;大商所时间
     * </pre>
     *
     * <code>string DCETime = 10;</code>
     */
    com.google.protobuf.ByteString
        getDCETimeBytes();

    /**
     * <pre>
     *&#47;郑商所时间
     * </pre>
     *
     * <code>string CZCETime = 11;</code>
     */
    java.lang.String getCZCETime();
    /**
     * <pre>
     *&#47;郑商所时间
     * </pre>
     *
     * <code>string CZCETime = 11;</code>
     */
    com.google.protobuf.ByteString
        getCZCETimeBytes();

    /**
     * <pre>
     *&#47;中金所时间
     * </pre>
     *
     * <code>string FFEXTime = 12;</code>
     */
    java.lang.String getFFEXTime();
    /**
     * <pre>
     *&#47;中金所时间
     * </pre>
     *
     * <code>string FFEXTime = 12;</code>
     */
    com.google.protobuf.ByteString
        getFFEXTimeBytes();

    /**
     * <pre>
     *&#47;能源中心时间
     * </pre>
     *
     * <code>string INETime = 13;</code>
     */
    java.lang.String getINETime();
    /**
     * <pre>
     *&#47;能源中心时间
     * </pre>
     *
     * <code>string INETime = 13;</code>
     */
    com.google.protobuf.ByteString
        getINETimeBytes();
  }
  /**
   * Protobuf type {@code com.xceder.CTP.messages.UserLoginResult}
   */
  public  static final class UserLoginResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.xceder.CTP.messages.UserLoginResult)
      UserLoginResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UserLoginResult.newBuilder() to construct.
    private UserLoginResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UserLoginResult() {
      tradingDay_ = "";
      loginTime_ = "";
      brokerID_ = "";
      userID_ = "";
      systemName_ = "";
      frontID_ = 0;
      sessionID_ = 0;
      maxOrderRef_ = "";
      sHFETime_ = "";
      dCETime_ = "";
      cZCETime_ = "";
      fFEXTime_ = "";
      iNETime_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private UserLoginResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              tradingDay_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              loginTime_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              brokerID_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              userID_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              systemName_ = s;
              break;
            }
            case 48: {

              frontID_ = input.readInt32();
              break;
            }
            case 56: {

              sessionID_ = input.readInt32();
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              maxOrderRef_ = s;
              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              sHFETime_ = s;
              break;
            }
            case 82: {
              java.lang.String s = input.readStringRequireUtf8();

              dCETime_ = s;
              break;
            }
            case 90: {
              java.lang.String s = input.readStringRequireUtf8();

              cZCETime_ = s;
              break;
            }
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();

              fFEXTime_ = s;
              break;
            }
            case 106: {
              java.lang.String s = input.readStringRequireUtf8();

              iNETime_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_UserLoginResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.xceder.CTP.messages.CTP.UserLoginResult.class, com.xceder.CTP.messages.CTP.UserLoginResult.Builder.class);
    }

    public static final int TRADINGDAY_FIELD_NUMBER = 1;
    private volatile java.lang.Object tradingDay_;
    /**
     * <pre>
     *&#47;交易日
     * </pre>
     *
     * <code>string TradingDay = 1;</code>
     */
    public java.lang.String getTradingDay() {
      java.lang.Object ref = tradingDay_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tradingDay_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;交易日
     * </pre>
     *
     * <code>string TradingDay = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTradingDayBytes() {
      java.lang.Object ref = tradingDay_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tradingDay_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOGINTIME_FIELD_NUMBER = 2;
    private volatile java.lang.Object loginTime_;
    /**
     * <pre>
     *&#47;登录成功时间
     * </pre>
     *
     * <code>string LoginTime = 2;</code>
     */
    public java.lang.String getLoginTime() {
      java.lang.Object ref = loginTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        loginTime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;登录成功时间
     * </pre>
     *
     * <code>string LoginTime = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLoginTimeBytes() {
      java.lang.Object ref = loginTime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        loginTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BROKERID_FIELD_NUMBER = 3;
    private volatile java.lang.Object brokerID_;
    /**
     * <pre>
     *&#47;经纪公司代码
     * </pre>
     *
     * <code>string BrokerID = 3;</code>
     */
    public java.lang.String getBrokerID() {
      java.lang.Object ref = brokerID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        brokerID_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;经纪公司代码
     * </pre>
     *
     * <code>string BrokerID = 3;</code>
     */
    public com.google.protobuf.ByteString
        getBrokerIDBytes() {
      java.lang.Object ref = brokerID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        brokerID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int USERID_FIELD_NUMBER = 4;
    private volatile java.lang.Object userID_;
    /**
     * <pre>
     *&#47;用户代码
     * </pre>
     *
     * <code>string UserID = 4;</code>
     */
    public java.lang.String getUserID() {
      java.lang.Object ref = userID_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        userID_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;用户代码
     * </pre>
     *
     * <code>string UserID = 4;</code>
     */
    public com.google.protobuf.ByteString
        getUserIDBytes() {
      java.lang.Object ref = userID_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        userID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SYSTEMNAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object systemName_;
    /**
     * <pre>
     *&#47;交易系统名称
     * </pre>
     *
     * <code>string SystemName = 5;</code>
     */
    public java.lang.String getSystemName() {
      java.lang.Object ref = systemName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        systemName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;交易系统名称
     * </pre>
     *
     * <code>string SystemName = 5;</code>
     */
    public com.google.protobuf.ByteString
        getSystemNameBytes() {
      java.lang.Object ref = systemName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        systemName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRONTID_FIELD_NUMBER = 6;
    private int frontID_;
    /**
     * <pre>
     *&#47;前置编号
     * </pre>
     *
     * <code>int32 FrontID = 6;</code>
     */
    public int getFrontID() {
      return frontID_;
    }

    public static final int SESSIONID_FIELD_NUMBER = 7;
    private int sessionID_;
    /**
     * <pre>
     *&#47;会话编号
     * </pre>
     *
     * <code>int32 SessionID = 7;</code>
     */
    public int getSessionID() {
      return sessionID_;
    }

    public static final int MAXORDERREF_FIELD_NUMBER = 8;
    private volatile java.lang.Object maxOrderRef_;
    /**
     * <pre>
     *&#47;最大报单引用
     * </pre>
     *
     * <code>string MaxOrderRef = 8;</code>
     */
    public java.lang.String getMaxOrderRef() {
      java.lang.Object ref = maxOrderRef_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        maxOrderRef_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;最大报单引用
     * </pre>
     *
     * <code>string MaxOrderRef = 8;</code>
     */
    public com.google.protobuf.ByteString
        getMaxOrderRefBytes() {
      java.lang.Object ref = maxOrderRef_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        maxOrderRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHFETIME_FIELD_NUMBER = 9;
    private volatile java.lang.Object sHFETime_;
    /**
     * <pre>
     *&#47;上期所时间
     * </pre>
     *
     * <code>string SHFETime = 9;</code>
     */
    public java.lang.String getSHFETime() {
      java.lang.Object ref = sHFETime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sHFETime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;上期所时间
     * </pre>
     *
     * <code>string SHFETime = 9;</code>
     */
    public com.google.protobuf.ByteString
        getSHFETimeBytes() {
      java.lang.Object ref = sHFETime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sHFETime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DCETIME_FIELD_NUMBER = 10;
    private volatile java.lang.Object dCETime_;
    /**
     * <pre>
     *&#47;大商所时间
     * </pre>
     *
     * <code>string DCETime = 10;</code>
     */
    public java.lang.String getDCETime() {
      java.lang.Object ref = dCETime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        dCETime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;大商所时间
     * </pre>
     *
     * <code>string DCETime = 10;</code>
     */
    public com.google.protobuf.ByteString
        getDCETimeBytes() {
      java.lang.Object ref = dCETime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dCETime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CZCETIME_FIELD_NUMBER = 11;
    private volatile java.lang.Object cZCETime_;
    /**
     * <pre>
     *&#47;郑商所时间
     * </pre>
     *
     * <code>string CZCETime = 11;</code>
     */
    public java.lang.String getCZCETime() {
      java.lang.Object ref = cZCETime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cZCETime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;郑商所时间
     * </pre>
     *
     * <code>string CZCETime = 11;</code>
     */
    public com.google.protobuf.ByteString
        getCZCETimeBytes() {
      java.lang.Object ref = cZCETime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cZCETime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FFEXTIME_FIELD_NUMBER = 12;
    private volatile java.lang.Object fFEXTime_;
    /**
     * <pre>
     *&#47;中金所时间
     * </pre>
     *
     * <code>string FFEXTime = 12;</code>
     */
    public java.lang.String getFFEXTime() {
      java.lang.Object ref = fFEXTime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fFEXTime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;中金所时间
     * </pre>
     *
     * <code>string FFEXTime = 12;</code>
     */
    public com.google.protobuf.ByteString
        getFFEXTimeBytes() {
      java.lang.Object ref = fFEXTime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fFEXTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INETIME_FIELD_NUMBER = 13;
    private volatile java.lang.Object iNETime_;
    /**
     * <pre>
     *&#47;能源中心时间
     * </pre>
     *
     * <code>string INETime = 13;</code>
     */
    public java.lang.String getINETime() {
      java.lang.Object ref = iNETime_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        iNETime_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *&#47;能源中心时间
     * </pre>
     *
     * <code>string INETime = 13;</code>
     */
    public com.google.protobuf.ByteString
        getINETimeBytes() {
      java.lang.Object ref = iNETime_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        iNETime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTradingDayBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tradingDay_);
      }
      if (!getLoginTimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, loginTime_);
      }
      if (!getBrokerIDBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, brokerID_);
      }
      if (!getUserIDBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, userID_);
      }
      if (!getSystemNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, systemName_);
      }
      if (frontID_ != 0) {
        output.writeInt32(6, frontID_);
      }
      if (sessionID_ != 0) {
        output.writeInt32(7, sessionID_);
      }
      if (!getMaxOrderRefBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, maxOrderRef_);
      }
      if (!getSHFETimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, sHFETime_);
      }
      if (!getDCETimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, dCETime_);
      }
      if (!getCZCETimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 11, cZCETime_);
      }
      if (!getFFEXTimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, fFEXTime_);
      }
      if (!getINETimeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, iNETime_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTradingDayBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tradingDay_);
      }
      if (!getLoginTimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, loginTime_);
      }
      if (!getBrokerIDBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, brokerID_);
      }
      if (!getUserIDBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, userID_);
      }
      if (!getSystemNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, systemName_);
      }
      if (frontID_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, frontID_);
      }
      if (sessionID_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, sessionID_);
      }
      if (!getMaxOrderRefBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, maxOrderRef_);
      }
      if (!getSHFETimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, sHFETime_);
      }
      if (!getDCETimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, dCETime_);
      }
      if (!getCZCETimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, cZCETime_);
      }
      if (!getFFEXTimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, fFEXTime_);
      }
      if (!getINETimeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, iNETime_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.xceder.CTP.messages.CTP.UserLoginResult)) {
        return super.equals(obj);
      }
      com.xceder.CTP.messages.CTP.UserLoginResult other = (com.xceder.CTP.messages.CTP.UserLoginResult) obj;

      boolean result = true;
      result = result && getTradingDay()
          .equals(other.getTradingDay());
      result = result && getLoginTime()
          .equals(other.getLoginTime());
      result = result && getBrokerID()
          .equals(other.getBrokerID());
      result = result && getUserID()
          .equals(other.getUserID());
      result = result && getSystemName()
          .equals(other.getSystemName());
      result = result && (getFrontID()
          == other.getFrontID());
      result = result && (getSessionID()
          == other.getSessionID());
      result = result && getMaxOrderRef()
          .equals(other.getMaxOrderRef());
      result = result && getSHFETime()
          .equals(other.getSHFETime());
      result = result && getDCETime()
          .equals(other.getDCETime());
      result = result && getCZCETime()
          .equals(other.getCZCETime());
      result = result && getFFEXTime()
          .equals(other.getFFEXTime());
      result = result && getINETime()
          .equals(other.getINETime());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRADINGDAY_FIELD_NUMBER;
      hash = (53 * hash) + getTradingDay().hashCode();
      hash = (37 * hash) + LOGINTIME_FIELD_NUMBER;
      hash = (53 * hash) + getLoginTime().hashCode();
      hash = (37 * hash) + BROKERID_FIELD_NUMBER;
      hash = (53 * hash) + getBrokerID().hashCode();
      hash = (37 * hash) + USERID_FIELD_NUMBER;
      hash = (53 * hash) + getUserID().hashCode();
      hash = (37 * hash) + SYSTEMNAME_FIELD_NUMBER;
      hash = (53 * hash) + getSystemName().hashCode();
      hash = (37 * hash) + FRONTID_FIELD_NUMBER;
      hash = (53 * hash) + getFrontID();
      hash = (37 * hash) + SESSIONID_FIELD_NUMBER;
      hash = (53 * hash) + getSessionID();
      hash = (37 * hash) + MAXORDERREF_FIELD_NUMBER;
      hash = (53 * hash) + getMaxOrderRef().hashCode();
      hash = (37 * hash) + SHFETIME_FIELD_NUMBER;
      hash = (53 * hash) + getSHFETime().hashCode();
      hash = (37 * hash) + DCETIME_FIELD_NUMBER;
      hash = (53 * hash) + getDCETime().hashCode();
      hash = (37 * hash) + CZCETIME_FIELD_NUMBER;
      hash = (53 * hash) + getCZCETime().hashCode();
      hash = (37 * hash) + FFEXTIME_FIELD_NUMBER;
      hash = (53 * hash) + getFFEXTime().hashCode();
      hash = (37 * hash) + INETIME_FIELD_NUMBER;
      hash = (53 * hash) + getINETime().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.xceder.CTP.messages.CTP.UserLoginResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.xceder.CTP.messages.CTP.UserLoginResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.xceder.CTP.messages.UserLoginResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.xceder.CTP.messages.UserLoginResult)
        com.xceder.CTP.messages.CTP.UserLoginResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_UserLoginResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.xceder.CTP.messages.CTP.UserLoginResult.class, com.xceder.CTP.messages.CTP.UserLoginResult.Builder.class);
      }

      // Construct using com.xceder.CTP.messages.CTP.UserLoginResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        tradingDay_ = "";

        loginTime_ = "";

        brokerID_ = "";

        userID_ = "";

        systemName_ = "";

        frontID_ = 0;

        sessionID_ = 0;

        maxOrderRef_ = "";

        sHFETime_ = "";

        dCETime_ = "";

        cZCETime_ = "";

        fFEXTime_ = "";

        iNETime_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.xceder.CTP.messages.CTP.internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor;
      }

      public com.xceder.CTP.messages.CTP.UserLoginResult getDefaultInstanceForType() {
        return com.xceder.CTP.messages.CTP.UserLoginResult.getDefaultInstance();
      }

      public com.xceder.CTP.messages.CTP.UserLoginResult build() {
        com.xceder.CTP.messages.CTP.UserLoginResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.xceder.CTP.messages.CTP.UserLoginResult buildPartial() {
        com.xceder.CTP.messages.CTP.UserLoginResult result = new com.xceder.CTP.messages.CTP.UserLoginResult(this);
        result.tradingDay_ = tradingDay_;
        result.loginTime_ = loginTime_;
        result.brokerID_ = brokerID_;
        result.userID_ = userID_;
        result.systemName_ = systemName_;
        result.frontID_ = frontID_;
        result.sessionID_ = sessionID_;
        result.maxOrderRef_ = maxOrderRef_;
        result.sHFETime_ = sHFETime_;
        result.dCETime_ = dCETime_;
        result.cZCETime_ = cZCETime_;
        result.fFEXTime_ = fFEXTime_;
        result.iNETime_ = iNETime_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.xceder.CTP.messages.CTP.UserLoginResult) {
          return mergeFrom((com.xceder.CTP.messages.CTP.UserLoginResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.xceder.CTP.messages.CTP.UserLoginResult other) {
        if (other == com.xceder.CTP.messages.CTP.UserLoginResult.getDefaultInstance()) return this;
        if (!other.getTradingDay().isEmpty()) {
          tradingDay_ = other.tradingDay_;
          onChanged();
        }
        if (!other.getLoginTime().isEmpty()) {
          loginTime_ = other.loginTime_;
          onChanged();
        }
        if (!other.getBrokerID().isEmpty()) {
          brokerID_ = other.brokerID_;
          onChanged();
        }
        if (!other.getUserID().isEmpty()) {
          userID_ = other.userID_;
          onChanged();
        }
        if (!other.getSystemName().isEmpty()) {
          systemName_ = other.systemName_;
          onChanged();
        }
        if (other.getFrontID() != 0) {
          setFrontID(other.getFrontID());
        }
        if (other.getSessionID() != 0) {
          setSessionID(other.getSessionID());
        }
        if (!other.getMaxOrderRef().isEmpty()) {
          maxOrderRef_ = other.maxOrderRef_;
          onChanged();
        }
        if (!other.getSHFETime().isEmpty()) {
          sHFETime_ = other.sHFETime_;
          onChanged();
        }
        if (!other.getDCETime().isEmpty()) {
          dCETime_ = other.dCETime_;
          onChanged();
        }
        if (!other.getCZCETime().isEmpty()) {
          cZCETime_ = other.cZCETime_;
          onChanged();
        }
        if (!other.getFFEXTime().isEmpty()) {
          fFEXTime_ = other.fFEXTime_;
          onChanged();
        }
        if (!other.getINETime().isEmpty()) {
          iNETime_ = other.iNETime_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.xceder.CTP.messages.CTP.UserLoginResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.xceder.CTP.messages.CTP.UserLoginResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object tradingDay_ = "";
      /**
       * <pre>
       *&#47;交易日
       * </pre>
       *
       * <code>string TradingDay = 1;</code>
       */
      public java.lang.String getTradingDay() {
        java.lang.Object ref = tradingDay_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tradingDay_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;交易日
       * </pre>
       *
       * <code>string TradingDay = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTradingDayBytes() {
        java.lang.Object ref = tradingDay_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tradingDay_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;交易日
       * </pre>
       *
       * <code>string TradingDay = 1;</code>
       */
      public Builder setTradingDay(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tradingDay_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;交易日
       * </pre>
       *
       * <code>string TradingDay = 1;</code>
       */
      public Builder clearTradingDay() {
        
        tradingDay_ = getDefaultInstance().getTradingDay();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;交易日
       * </pre>
       *
       * <code>string TradingDay = 1;</code>
       */
      public Builder setTradingDayBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tradingDay_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object loginTime_ = "";
      /**
       * <pre>
       *&#47;登录成功时间
       * </pre>
       *
       * <code>string LoginTime = 2;</code>
       */
      public java.lang.String getLoginTime() {
        java.lang.Object ref = loginTime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          loginTime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;登录成功时间
       * </pre>
       *
       * <code>string LoginTime = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLoginTimeBytes() {
        java.lang.Object ref = loginTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          loginTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;登录成功时间
       * </pre>
       *
       * <code>string LoginTime = 2;</code>
       */
      public Builder setLoginTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        loginTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;登录成功时间
       * </pre>
       *
       * <code>string LoginTime = 2;</code>
       */
      public Builder clearLoginTime() {
        
        loginTime_ = getDefaultInstance().getLoginTime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;登录成功时间
       * </pre>
       *
       * <code>string LoginTime = 2;</code>
       */
      public Builder setLoginTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        loginTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object brokerID_ = "";
      /**
       * <pre>
       *&#47;经纪公司代码
       * </pre>
       *
       * <code>string BrokerID = 3;</code>
       */
      public java.lang.String getBrokerID() {
        java.lang.Object ref = brokerID_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          brokerID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;经纪公司代码
       * </pre>
       *
       * <code>string BrokerID = 3;</code>
       */
      public com.google.protobuf.ByteString
          getBrokerIDBytes() {
        java.lang.Object ref = brokerID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          brokerID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;经纪公司代码
       * </pre>
       *
       * <code>string BrokerID = 3;</code>
       */
      public Builder setBrokerID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        brokerID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;经纪公司代码
       * </pre>
       *
       * <code>string BrokerID = 3;</code>
       */
      public Builder clearBrokerID() {
        
        brokerID_ = getDefaultInstance().getBrokerID();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;经纪公司代码
       * </pre>
       *
       * <code>string BrokerID = 3;</code>
       */
      public Builder setBrokerIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        brokerID_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object userID_ = "";
      /**
       * <pre>
       *&#47;用户代码
       * </pre>
       *
       * <code>string UserID = 4;</code>
       */
      public java.lang.String getUserID() {
        java.lang.Object ref = userID_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          userID_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;用户代码
       * </pre>
       *
       * <code>string UserID = 4;</code>
       */
      public com.google.protobuf.ByteString
          getUserIDBytes() {
        java.lang.Object ref = userID_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          userID_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;用户代码
       * </pre>
       *
       * <code>string UserID = 4;</code>
       */
      public Builder setUserID(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        userID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;用户代码
       * </pre>
       *
       * <code>string UserID = 4;</code>
       */
      public Builder clearUserID() {
        
        userID_ = getDefaultInstance().getUserID();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;用户代码
       * </pre>
       *
       * <code>string UserID = 4;</code>
       */
      public Builder setUserIDBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        userID_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object systemName_ = "";
      /**
       * <pre>
       *&#47;交易系统名称
       * </pre>
       *
       * <code>string SystemName = 5;</code>
       */
      public java.lang.String getSystemName() {
        java.lang.Object ref = systemName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          systemName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;交易系统名称
       * </pre>
       *
       * <code>string SystemName = 5;</code>
       */
      public com.google.protobuf.ByteString
          getSystemNameBytes() {
        java.lang.Object ref = systemName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          systemName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;交易系统名称
       * </pre>
       *
       * <code>string SystemName = 5;</code>
       */
      public Builder setSystemName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        systemName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;交易系统名称
       * </pre>
       *
       * <code>string SystemName = 5;</code>
       */
      public Builder clearSystemName() {
        
        systemName_ = getDefaultInstance().getSystemName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;交易系统名称
       * </pre>
       *
       * <code>string SystemName = 5;</code>
       */
      public Builder setSystemNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        systemName_ = value;
        onChanged();
        return this;
      }

      private int frontID_ ;
      /**
       * <pre>
       *&#47;前置编号
       * </pre>
       *
       * <code>int32 FrontID = 6;</code>
       */
      public int getFrontID() {
        return frontID_;
      }
      /**
       * <pre>
       *&#47;前置编号
       * </pre>
       *
       * <code>int32 FrontID = 6;</code>
       */
      public Builder setFrontID(int value) {
        
        frontID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;前置编号
       * </pre>
       *
       * <code>int32 FrontID = 6;</code>
       */
      public Builder clearFrontID() {
        
        frontID_ = 0;
        onChanged();
        return this;
      }

      private int sessionID_ ;
      /**
       * <pre>
       *&#47;会话编号
       * </pre>
       *
       * <code>int32 SessionID = 7;</code>
       */
      public int getSessionID() {
        return sessionID_;
      }
      /**
       * <pre>
       *&#47;会话编号
       * </pre>
       *
       * <code>int32 SessionID = 7;</code>
       */
      public Builder setSessionID(int value) {
        
        sessionID_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;会话编号
       * </pre>
       *
       * <code>int32 SessionID = 7;</code>
       */
      public Builder clearSessionID() {
        
        sessionID_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object maxOrderRef_ = "";
      /**
       * <pre>
       *&#47;最大报单引用
       * </pre>
       *
       * <code>string MaxOrderRef = 8;</code>
       */
      public java.lang.String getMaxOrderRef() {
        java.lang.Object ref = maxOrderRef_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          maxOrderRef_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;最大报单引用
       * </pre>
       *
       * <code>string MaxOrderRef = 8;</code>
       */
      public com.google.protobuf.ByteString
          getMaxOrderRefBytes() {
        java.lang.Object ref = maxOrderRef_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          maxOrderRef_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;最大报单引用
       * </pre>
       *
       * <code>string MaxOrderRef = 8;</code>
       */
      public Builder setMaxOrderRef(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        maxOrderRef_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;最大报单引用
       * </pre>
       *
       * <code>string MaxOrderRef = 8;</code>
       */
      public Builder clearMaxOrderRef() {
        
        maxOrderRef_ = getDefaultInstance().getMaxOrderRef();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;最大报单引用
       * </pre>
       *
       * <code>string MaxOrderRef = 8;</code>
       */
      public Builder setMaxOrderRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        maxOrderRef_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object sHFETime_ = "";
      /**
       * <pre>
       *&#47;上期所时间
       * </pre>
       *
       * <code>string SHFETime = 9;</code>
       */
      public java.lang.String getSHFETime() {
        java.lang.Object ref = sHFETime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sHFETime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;上期所时间
       * </pre>
       *
       * <code>string SHFETime = 9;</code>
       */
      public com.google.protobuf.ByteString
          getSHFETimeBytes() {
        java.lang.Object ref = sHFETime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sHFETime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;上期所时间
       * </pre>
       *
       * <code>string SHFETime = 9;</code>
       */
      public Builder setSHFETime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sHFETime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;上期所时间
       * </pre>
       *
       * <code>string SHFETime = 9;</code>
       */
      public Builder clearSHFETime() {
        
        sHFETime_ = getDefaultInstance().getSHFETime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;上期所时间
       * </pre>
       *
       * <code>string SHFETime = 9;</code>
       */
      public Builder setSHFETimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sHFETime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object dCETime_ = "";
      /**
       * <pre>
       *&#47;大商所时间
       * </pre>
       *
       * <code>string DCETime = 10;</code>
       */
      public java.lang.String getDCETime() {
        java.lang.Object ref = dCETime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          dCETime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;大商所时间
       * </pre>
       *
       * <code>string DCETime = 10;</code>
       */
      public com.google.protobuf.ByteString
          getDCETimeBytes() {
        java.lang.Object ref = dCETime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          dCETime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;大商所时间
       * </pre>
       *
       * <code>string DCETime = 10;</code>
       */
      public Builder setDCETime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dCETime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;大商所时间
       * </pre>
       *
       * <code>string DCETime = 10;</code>
       */
      public Builder clearDCETime() {
        
        dCETime_ = getDefaultInstance().getDCETime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;大商所时间
       * </pre>
       *
       * <code>string DCETime = 10;</code>
       */
      public Builder setDCETimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dCETime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object cZCETime_ = "";
      /**
       * <pre>
       *&#47;郑商所时间
       * </pre>
       *
       * <code>string CZCETime = 11;</code>
       */
      public java.lang.String getCZCETime() {
        java.lang.Object ref = cZCETime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          cZCETime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;郑商所时间
       * </pre>
       *
       * <code>string CZCETime = 11;</code>
       */
      public com.google.protobuf.ByteString
          getCZCETimeBytes() {
        java.lang.Object ref = cZCETime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          cZCETime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;郑商所时间
       * </pre>
       *
       * <code>string CZCETime = 11;</code>
       */
      public Builder setCZCETime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        cZCETime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;郑商所时间
       * </pre>
       *
       * <code>string CZCETime = 11;</code>
       */
      public Builder clearCZCETime() {
        
        cZCETime_ = getDefaultInstance().getCZCETime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;郑商所时间
       * </pre>
       *
       * <code>string CZCETime = 11;</code>
       */
      public Builder setCZCETimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        cZCETime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fFEXTime_ = "";
      /**
       * <pre>
       *&#47;中金所时间
       * </pre>
       *
       * <code>string FFEXTime = 12;</code>
       */
      public java.lang.String getFFEXTime() {
        java.lang.Object ref = fFEXTime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fFEXTime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;中金所时间
       * </pre>
       *
       * <code>string FFEXTime = 12;</code>
       */
      public com.google.protobuf.ByteString
          getFFEXTimeBytes() {
        java.lang.Object ref = fFEXTime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fFEXTime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;中金所时间
       * </pre>
       *
       * <code>string FFEXTime = 12;</code>
       */
      public Builder setFFEXTime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fFEXTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;中金所时间
       * </pre>
       *
       * <code>string FFEXTime = 12;</code>
       */
      public Builder clearFFEXTime() {
        
        fFEXTime_ = getDefaultInstance().getFFEXTime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;中金所时间
       * </pre>
       *
       * <code>string FFEXTime = 12;</code>
       */
      public Builder setFFEXTimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fFEXTime_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object iNETime_ = "";
      /**
       * <pre>
       *&#47;能源中心时间
       * </pre>
       *
       * <code>string INETime = 13;</code>
       */
      public java.lang.String getINETime() {
        java.lang.Object ref = iNETime_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          iNETime_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *&#47;能源中心时间
       * </pre>
       *
       * <code>string INETime = 13;</code>
       */
      public com.google.protobuf.ByteString
          getINETimeBytes() {
        java.lang.Object ref = iNETime_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          iNETime_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *&#47;能源中心时间
       * </pre>
       *
       * <code>string INETime = 13;</code>
       */
      public Builder setINETime(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        iNETime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;能源中心时间
       * </pre>
       *
       * <code>string INETime = 13;</code>
       */
      public Builder clearINETime() {
        
        iNETime_ = getDefaultInstance().getINETime();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *&#47;能源中心时间
       * </pre>
       *
       * <code>string INETime = 13;</code>
       */
      public Builder setINETimeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        iNETime_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.xceder.CTP.messages.UserLoginResult)
    }

    // @@protoc_insertion_point(class_scope:com.xceder.CTP.messages.UserLoginResult)
    private static final com.xceder.CTP.messages.CTP.UserLoginResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.xceder.CTP.messages.CTP.UserLoginResult();
    }

    public static com.xceder.CTP.messages.CTP.UserLoginResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UserLoginResult>
        PARSER = new com.google.protobuf.AbstractParser<UserLoginResult>() {
      public UserLoginResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new UserLoginResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<UserLoginResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UserLoginResult> getParserForType() {
      return PARSER;
    }

    public com.xceder.CTP.messages.CTP.UserLoginResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_ProcessTimeStamp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_Respond_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_Respond_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_LoginParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_LoginParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_PriceRequestParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_SettleInfoParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_TradingAccountParam_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_xceder_CTP_messages_UserLoginResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017proto/CTP.proto\022\027com.xceder.CTP.messag" +
      "es\"M\n\020ProcessTimeStamp\022\021\n\tcreateUTC\030\001 \001(" +
      "\004\022\021\n\tsubmitUTC\030\002 \001(\004\022\023\n\013responseUTC\030\003 \001(" +
      "\004\"Y\n\007Respond\022:\n\014respondError\030\001 \001(\0162$.com" +
      ".xceder.CTP.messages.CTPRespCode\022\022\n\nresp" +
      "ondMsg\030\002 \001(\t\"<\n\nLoginParam\022\016\n\006broker\030\001 \001" +
      "(\t\022\014\n\004user\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"8\n\021Pr" +
      "iceRequestParam\022\023\n\013inSubscribe\030\001 \001(\010\022\016\n\006" +
      "symbol\030\002 \001(\t\"B\n\017SettleInfoParam\022\016\n\006broke" +
      "r\030\001 \001(\t\022\014\n\004user\030\002 \001(\t\022\021\n\tsettleDay\030\003 \001(\t" +
      "\"E\n\023TradingAccountParam\022\016\n\006broker\030\001 \001(\t\022" +
      "\014\n\004user\030\002 \001(\t\022\020\n\010currency\030\003 \001(\t\"\377\001\n\017User" +
      "LoginResult\022\022\n\nTradingDay\030\001 \001(\t\022\021\n\tLogin" +
      "Time\030\002 \001(\t\022\020\n\010BrokerID\030\003 \001(\t\022\016\n\006UserID\030\004" +
      " \001(\t\022\022\n\nSystemName\030\005 \001(\t\022\017\n\007FrontID\030\006 \001(" +
      "\005\022\021\n\tSessionID\030\007 \001(\005\022\023\n\013MaxOrderRef\030\010 \001(" +
      "\t\022\020\n\010SHFETime\030\t \001(\t\022\017\n\007DCETime\030\n \001(\t\022\020\n\010" +
      "CZCETime\030\013 \001(\t\022\020\n\010FFEXTime\030\014 \001(\t\022\017\n\007INET" +
      "ime\030\r \001(\t*\262#\n\013CTPRespCode\022\010\n\004NONE\020\000\022\034\n\030I" +
      "NVALID_DATA_SYNC_STATUS\020\001\022\034\n\030INCONSISTEN" +
      "T_INFORMATION\020\002\022\021\n\rINVALID_LOGIN\020\003\022\023\n\017US" +
      "ER_NOT_ACTIVE\020\004\022\023\n\017DUPLICATE_LOGIN\020\005\022\021\n\r" +
      "NOT_LOGIN_YET\020\006\022\016\n\nNOT_INITED\020\007\022\024\n\020FRONT" +
      "_NOT_ACTIVE\020\010\022\020\n\014NO_PRIVILEGE\020\t\022\031\n\025CHANG" +
      "E_OTHER_PASSWORD\020\n\022\022\n\016USER_NOT_FOUND\020\013\022\024" +
      "\n\020BROKER_NOT_FOUND\020\014\022\026\n\022INVESTOR_NOT_FOU" +
      "ND\020\r\022\031\n\025OLD_PASSWORD_MISMATCH\020\016\022\r\n\tBAD_F" +
      "IELD\020\017\022\030\n\024INSTRUMENT_NOT_FOUND\020\020\022\032\n\026INST" +
      "RUMENT_NOT_TRADING\020\021\022\034\n\030NOT_EXCHANGE_PAR" +
      "TICIPANT\020\022\022\027\n\023INVESTOR_NOT_ACTIVE\020\023\022\027\n\023N" +
      "OT_EXCHANGE_CLIENT\020\024\022\035\n\031NO_VALID_TRADER_" +
      "AVAILABLE\020\025\022\027\n\023DUPLICATE_ORDER_REF\020\026\022\032\n\026" +
      "BAD_ORDER_ACTION_FIELD\020\027\022\036\n\032DUPLICATE_OR" +
      "DER_ACTION_REF\020\030\022\023\n\017ORDER_NOT_FOUND\020\031\022\033\n" +
      "\027INSUITABLE_ORDER_STATUS\020\032\022\030\n\024UNSUPPORTE" +
      "D_FUNCTION\020\033\022\024\n\020NO_TRADING_RIGHT\020\034\022\016\n\nCL" +
      "OSE_ONLY\020\035\022\027\n\023OVER_CLOSE_POSITION\020\036\022\026\n\022I" +
      "NSUFFICIENT_MONEY\020\037\022\020\n\014DUPLICATE_PK\020 \022\022\n" +
      "\016CANNOT_FIND_PK\020!\022\033\n\027CAN_NOT_INACTIVE_BR" +
      "OKER\020\"\022\030\n\024BROKER_SYNCHRONIZING\020#\022\027\n\023BROK" +
      "ER_SYNCHRONIZED\020$\022\016\n\nSHORT_SELL\020%\022\032\n\026INV" +
      "ALID_SETTLEMENT_REF\020&\022\027\n\023CFFEX_NETWORK_E" +
      "RROR\020\'\022\026\n\022CFFEX_OVER_REQUEST\020(\022!\n\035CFFEX_" +
      "OVER_REQUEST_PER_SECOND\020)\022!\n\035SETTLEMENT_" +
      "INFO_NOT_CONFIRMED\020*\022\025\n\021DEPOSIT_NOT_FOUN" +
      "D\020+\022\023\n\017EXCHANG_TRADING\020,\022\031\n\025PARKEDORDER_" +
      "NOT_FOUND\020-\022\031\n\025PARKEDORDER_HASSENDED\020.\022\031" +
      "\n\025PARKEDORDER_HASDELETE\020/\022 \n\034INVALID_INV" +
      "ESTORIDORPASSWORD\0200\022\033\n\027INVALID_LOGIN_IPA" +
      "DDRESS\0201\022\034\n\030OVER_CLOSETODAY_POSITION\0202\022 " +
      "\n\034OVER_CLOSEYESTERDAY_POSITION\0203\022\037\n\033BROK" +
      "ER_NOT_ENOUGH_CONDORDER\0204\022!\n\035INVESTOR_NO" +
      "T_ENOUGH_CONDORDER\0205\022 \n\034BROKER_NOT_SUPPO" +
      "RT_CONDORDER\0206\022(\n$RESEND_ORDER_BROKERINV" +
      "ESTOR_NOTMATCH\0207\022\022\n\016SYC_OTP_FAILED\0208\022\020\n\014" +
      "OTP_MISMATCH\0209\022\026\n\022OTPPARAM_NOT_FOUND\020:\022\027" +
      "\n\023UNSUPPORTED_OTPTYPE\020;\022\"\n\036SINGLEUSERSES" +
      "SION_EXCEED_LIMIT\020<\022\"\n\036EXCHANGE_UNSUPPOR" +
      "TED_ARBITRAGE\020=\022\036\n\032NO_CONDITIONAL_ORDER_" +
      "RIGHT\020>\022\017\n\013AUTH_FAILED\020?\022\017\n\013NOT_AUTHENT\020" +
      "@\022\031\n\025SWAPORDER_UNSUPPORTED\020A\022\035\n\031OPTIONS_" +
      "ONLY_SUPPORT_SPEC\020B\022\033\n\027DUPLICATE_EXECORD" +
      "ER_REF\020C\022,\n(RESEND_EXECORDER_BROKERINVES" +
      "TOR_NOTMATCH\020D\022\030\n\024EXECORDER_NOTOPTIONS\020E" +
      "\022\034\n\030OPTIONS_NOT_SUPPORT_EXEC\020F\022\036\n\032BAD_EX" +
      "ECORDER_ACTION_FIELD\020G\022\"\n\036DUPLICATE_EXEC" +
      "ORDER_ACTION_REF\020H\022\027\n\023EXECORDER_NOT_FOUN" +
      "D\020I\022\031\n\025OVER_EXECUTE_POSITION\020J\022\023\n\017LOGIN_" +
      "FORBIDDEN\020K\022\032\n\026INVALID_TRANSFER_AGENT\020L\022" +
      "\025\n\021NO_FOUND_FUNCTION\020M\022\035\n\031SEND_EXCHANGEO" +
      "RDER_FAILED\020N\022#\n\037SEND_EXCHANGEORDERACTIO" +
      "N_FAILED\020O\022#\n\037PRICETYPE_NOTSUPPORT_BYEXC" +
      "HANGE\020P\022\024\n\020BAD_EXECUTE_TYPE\020Q\022\024\n\020BAD_OPT" +
      "ION_INSTR\020R\022\035\n\031INSTR_NOTSUPPORT_FORQUOTE" +
      "\020S\022(\n$RESEND_QUOTE_BROKERINVESTOR_NOTMAT" +
      "CH\020T\022\032\n\026INSTR_NOTSUPPORT_QUOTE\020U\022\023\n\017QUOT" +
      "E_NOT_FOUND\020V\022\037\n\033OPTIONS_NOT_SUPPORT_ABA" +
      "NDON\020W\022 \n\034COMBOPTIONS_SUPPORT_IOC_ONLY\020X" +
      "\022\024\n\020OPEN_FILE_FAILED\020Y\022\016\n\nNEED_RETRY\020Z\022\025" +
      "\n\021EXCHANGE_RTNERROR\020[\022\"\n\036QUOTE_DERIVEDOR" +
      "DER_ACTIONERROR\020\\\022\033\n\027INSTRUMENTMAP_NOT_F" +
      "OUND\020]\022\037\n\033NO_TRADING_RIGHT_IN_SEPC_DR\020e\022" +
      "\014\n\010NO_DR_NO\020f\022 \n\033SEND_INSTITUTION_CODE_E" +
      "RROR\020\350\007\022\027\n\022NO_GET_PLATFORM_SN\020\351\007\022\032\n\025ILLE" +
      "GAL_TRANSFER_BANK\020\352\007\022\031\n\024ALREADY_OPEN_ACC" +
      "OUNT\020\353\007\022\025\n\020NOT_OPEN_ACCOUNT\020\354\007\022\017\n\nPROCES" +
      "SING\020\355\007\022\r\n\010OVERTIME\020\356\007\022\025\n\020RECORD_NOT_FOU" +
      "ND\020\357\007\022+\n&NO_FOUND_REVERSAL_ORIGINAL_TRAN" +
      "SACTION\020\360\007\022\030\n\023CONNECT_HOST_FAILED\020\361\007\022\020\n\013" +
      "SEND_FAILED\020\362\007\022\022\n\rLATE_RESPONSE\020\363\007\022\036\n\031RE" +
      "VERSAL_BANKID_NOT_MATCH\020\364\007\022#\n\036REVERSAL_B" +
      "ANKACCOUNT_NOT_MATCH\020\365\007\022 \n\033REVERSAL_BROK" +
      "ERID_NOT_MATCH\020\366\007\022!\n\034REVERSAL_ACCOUNTID_" +
      "NOT_MATCH\020\367\007\022\036\n\031REVERSAL_AMOUNT_NOT_MATC" +
      "H\020\370\007\022\030\n\023DB_OPERATION_FAILED\020\371\007\022\025\n\020SEND_A" +
      "SP_FAILURE\020\372\007\022\017\n\nNOT_SIGNIN\020\373\007\022\023\n\016ALREAD" +
      "Y_SIGNIN\020\374\007\022\031\n\024AMOUNT_OR_TIMES_OVER\020\375\007\022\031" +
      "\n\024NOT_IN_TRANSFER_TIME\020\376\007\022\026\n\021BANK_SERVER" +
      "_ERROR\020\377\007\022\034\n\027BANK_SERIAL_IS_REPEALED\020\200\010\022" +
      "\032\n\025BANK_SERIAL_NOT_EXIST\020\201\010\022\022\n\rNOT_ORGAN" +
      "_MAP\020\202\010\022\023\n\016EXIST_TRANSFER\020\203\010\022\031\n\024BANK_FOR" +
      "BID_REVERSAL\020\204\010\022\024\n\017DUP_BANK_SERIAL\020\205\010\022\024\n" +
      "\017FBT_SYSTEM_BUSY\020\206\010\022\023\n\016MACKEY_SYNCING\020\207\010" +
      "\022\037\n\032ACCOUNTID_ALREADY_REGISTER\020\210\010\022!\n\034BAN" +
      "KACCOUNT_ALREADY_REGISTER\020\211\010\022\034\n\027DUP_BANK" +
      "_SERIAL_REDO_OK\020\212\010\022\035\n\030CURRENCYID_NOT_SUP" +
      "PORTED\020\213\010\022\020\n\013INVALID_MAC\020\214\010\022!\n\034NOT_SUPPO" +
      "RT_SECAGENT_BY_BANK\020\215\010\022\023\n\016PINKEY_SYNCING" +
      "\020\216\010\022\032\n\025SECAGENT_QUERY_BY_CCB\020\217\010\022!\n\034NO_VA" +
      "LID_BANKOFFER_AVAILABLE\020\320\017\022\026\n\021PASSWORD_M" +
      "ISMATCH\020\321\017\022\032\n\025DUPLATION_BANK_SERIAL\020\324\017\022\033" +
      "\n\026DUPLATION_OFFER_SERIAL\020\325\017\022\025\n\020SERIAL_NO" +
      "T_EXSIT\020\326\017\022\027\n\022SERIAL_IS_REPEALED\020\327\017\022\024\n\017S" +
      "ERIAL_MISMATCH\020\330\017\022\036\n\031IdentifiedCardNo_MI" +
      "SMATCH\020\331\017\022\025\n\020ACCOUNT_NOT_FUND\020\333\017\022\027\n\022ACCO" +
      "UNT_NOT_ACTIVE\020\334\017\022\036\n\031NOT_ALLOW_REPEAL_BY" +
      "MANUAL\020\335\017\022\027\n\022AMOUNT_OUTOFTHEWAY\020\336\017\022\033\n\026EX" +
      "CHANGERATE_NOT_FOUND\020\337\017\022\027\n\021WAITING_OFFER" +
      "_RSP\020\277\204=\022\033\n\026FBE_NO_GET_PLATFORM_SN\020\271\027\022\036\n" +
      "\031FBE_ILLEGAL_TRANSFER_BANK\020\272\027\022\023\n\016FBE_PRO" +
      "CESSING\020\275\027\022\021\n\014FBE_OVERTIME\020\276\027\022\031\n\024FBE_REC" +
      "ORD_NOT_FOUND\020\277\027\022\034\n\027FBE_CONNECT_HOST_FAI" +
      "LED\020\301\027\022\024\n\017FBE_SEND_FAILED\020\302\027\022\026\n\021FBE_LATE" +
      "_RESPONSE\020\303\027\022\034\n\027FBE_DB_OPERATION_FAILED\020" +
      "\311\027\022\023\n\016FBE_NOT_SIGNIN\020\313\027\022\027\n\022FBE_ALREADY_S" +
      "IGNIN\020\314\027\022\035\n\030FBE_AMOUNT_OR_TIMES_OVER\020\315\027\022" +
      "\035\n\030FBE_NOT_IN_TRANSFER_TIME\020\316\027\022\032\n\025FBE_BA" +
      "NK_SERVER_ERROR\020\317\027\022\026\n\021FBE_NOT_ORGAN_MAP\020" +
      "\322\027\022\024\n\017FBE_SYSTEM_BUSY\020\326\027\022!\n\034FBE_CURRENCY" +
      "ID_NOT_SUPPORTED\020\333\027\022\033\n\026FBE_WRONG_BANK_AC" +
      "COUNT\020\334\027\022\036\n\031FBE_BANK_ACCOUNT_NO_FUNDS\020\335\027" +
      "\022\024\n\017FBE_DUP_CERT_NO\020\336\027*\266\001\n\021DISCONNECT_RE" +
      "ASON\022\013\n\007CONNECT\020\000\022\022\n\016UNKNOWN_REASON\020\001\022\021\n" +
      "\rLOGOUT_REASON\020\002\022\021\n\014READING_FAIL\020\201 \022\021\n\014W" +
      "RITING_FAIL\020\202 \022\026\n\021HEARTBEAT_TIMEOUT\020\201@\022\033" +
      "\n\026HEARTBEAT_SEND_TIMEOUT\020\202@\022\022\n\rRECEIVE_E" +
      "RROR\020\263\006*o\n\010REQ_CODE\022\006\n\002OK\020\000\022\014\n\010QUEUEING\020" +
      "\001\022\013\n\007NETFAIL\020\013\022\030\n\024EXCEED_PENDING_QUOTA\020\014" +
      "\022\030\n\024EXCEED_REQ_FREQUENCY\020\r\022\014\n\010NOT_INIT\020d" +
      "*\\\n\010REQ_TYPE\022\013\n\007UNKNOWN\020\000\022\t\n\005LOGIN\020\001\022\n\n\006" +
      "LOGOUT\020\002\022\t\n\005PRICE\020\003\022\t\n\005ORDER\020\004\022\t\n\005QUERY\020" +
      "\005\022\013\n\007ACCOUNT\020\006B\002H\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_xceder_CTP_messages_ProcessTimeStamp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_ProcessTimeStamp_descriptor,
        new java.lang.String[] { "CreateUTC", "SubmitUTC", "ResponseUTC", });
    internal_static_com_xceder_CTP_messages_Respond_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_xceder_CTP_messages_Respond_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_Respond_descriptor,
        new java.lang.String[] { "RespondError", "RespondMsg", });
    internal_static_com_xceder_CTP_messages_LoginParam_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_xceder_CTP_messages_LoginParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_LoginParam_descriptor,
        new java.lang.String[] { "Broker", "User", "Password", });
    internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_xceder_CTP_messages_PriceRequestParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_PriceRequestParam_descriptor,
        new java.lang.String[] { "InSubscribe", "Symbol", });
    internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_xceder_CTP_messages_SettleInfoParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_SettleInfoParam_descriptor,
        new java.lang.String[] { "Broker", "User", "SettleDay", });
    internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_com_xceder_CTP_messages_TradingAccountParam_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_TradingAccountParam_descriptor,
        new java.lang.String[] { "Broker", "User", "Currency", });
    internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_com_xceder_CTP_messages_UserLoginResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_xceder_CTP_messages_UserLoginResult_descriptor,
        new java.lang.String[] { "TradingDay", "LoginTime", "BrokerID", "UserID", "SystemName", "FrontID", "SessionID", "MaxOrderRef", "SHFETime", "DCETime", "CZCETime", "FFEXTime", "INETime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
